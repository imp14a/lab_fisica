-- phpMyAdmin SQL Dump
-- version 3.2.0.1
-- http://www.phpmyadmin.net
--
-- Servidor: localhost
-- Tiempo de generación: 20-09-2013 a las 16:16:33
-- Versión del servidor: 5.1.37
-- Versión de PHP: 5.3.0

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";

--
-- Base de datos: `lab_fisica`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `activity`
--

DROP TABLE IF EXISTS `activity`;
CREATE TABLE IF NOT EXISTS `activity` (
  `activity_id` int(11) NOT NULL AUTO_INCREMENT,
  `activity_prefix` varchar(20) DEFAULT NULL,
  `title` varchar(180) NOT NULL,
  `description` text,
  `objetive` text,
  `steps` text,
  `observations` text,
  PRIMARY KEY (`activity_id`),
  UNIQUE KEY `activity_prefix` (`activity_prefix`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=27 ;

--
-- Volcar la base de datos para la tabla `activity`
--

INSERT INTO `activity` (`activity_id`, `activity_prefix`, `title`, `description`, `objetive`, `steps`, `observations`) VALUES
(1, 'pendullum', 'Péndulo', 'El comportamiento de un péndulo depende principalmente de la longitud de la Cuerda, la Fuerza de Gravedad y la Masa del cuerpo.\r\n\r\nUn péndulo es un sistema físico ideal constituido por un hilo inextensible y de Masa despreciable, sostenido por su extremo superior de un punto Fijo, con una Masa puntual en su extremo inferior que oscila libremente en el vacío. Si el movimiento de la Masa se mantiene en un plano, se dice que es un péndulo plano; en caso contrario, se dice que es un péndulo esférico.\r\nAlgunas aplicaciones del péndulo son la medición del tiempo, el metrónomo y la plomada. Otra aplicación se conoce como Péndulo de Foucault, el cual se emplea para evidenciar la rotación de la Tierra. Se llama así en honor del físico francés León Foucault y está formado por una gran Masa suspendida de un cable muy largo.\r\n \r\nPéndulo plano \r\n\r\nDiagrama de las fuerzas que actúan en un péndulo simple.\r\nAl separar la Masa de su punto de equilibrio, oscila a ambos lados de dicha posición, realizando un movimiento armónico simple. En la posición de uno de los extremos, se produce un equilibrio de fuerzas. Para derivar las ecuaciones pertenecientes a un péndulo gravitacional se deben hacer las siguientes hipótesis:\r\n·	Hilo inextensible y sin peso \r\n·	Movimiento sin rozamiento del aire \r\nLa flecha azul representa la Fuerza debido a la Gravedad actuando Sobre la Masa. Las flechas violetas son la misma Fuerza descompuesta en sus componentes paralelos y perpendiculares al movimiento instantáneo de la Masa. La segunda ley de Newton\r\n\r\nF = ma\r\ndonde F es la Fuerza actuando Sobre la Masa m, haciendo que acelere a metros por segundo cuadrado. Ya que la Masa está obligada a mover en un trazo circular verde, no hay necesidad de considerar ninguna otra Fuerza que la responsable de aceleración instantánea paralelo al movimiento instantánea de la Masa, la flecha violeta corta:\r\n\r\nF =  mgsin (ángulo)= ma\r\nLa Fuerza perpendicular, que mantiene la Masa en estado de equilibrio con la tensión del hilo es\r\nF (perpendicular) = mg cos(ángulo)\r\n\r\nAceleración lineal a por el eje rojo está relacionado con el cambio en el ángulo ? por la fórmula para encontrar la longitud de arco:\r\n\r\nDe donde se deduce que la Velocidad y la aceleración vienen dadas por:\r\n\r\n\r\nEsta aceleración no toma en cuenta que el ángulo ? está disminuyendo. La ecuación de movimiento teniendo en cuenta que la aceleración a tiene que llevar un signo negativo viene dada por:', 'El alumno observará la influencia de la gravedad, la masa del cuerpo y la longitud de la cuerda basados en un impulso inicial.', 'Modificar la Masa del cuerpo. Para ello, deberá entrar al menú del "Propiedades iniciales" y cambiar los valores por:\r\nMasa = 2\r\nMasa = 8\r\nMasa = 20\r\nMasa = 30\r\nSacar sus conclusiones\r\n\r\nTambién puede cambiar la longitud de la Cuerda\r\n\r\nCambiar la Fuerza de Gravedad para observavar el comportamiento del péndulo.\r\nLa Gravedad de la Tierra es de -9.81, \r\nLa Gravedad de la Luna es de -1.62\r\nLa Gravedad de Mercurio es de -2.78\r\nLa Gravedad de Venus es de -8.87\r\nLa Gravedad de Marte es de -3.71\r\nLa Gravedad de Júpiter es de -23.12\r\nLa Gravedad de Urano es de -8.69\r\nLa Gravedad de Neptuno es de -11\r\n\r\nSacar sus conclusiones cuando se hace el experimento en orto planeta', '¿Cuál es el impacto de la masa para un  péndulo?\r\n\r\n\r\n¿Qué sucede al aumentar la longitud de la cuerda?\r\n\r\n\r\n¿Es proporcional el efecto en el objeto al aumentar la longitud de la cuerda?\r\n\r\n\r\n¿Qué sucede si le damos un impulso al objeto con coordenadas negativas?\r\n\r\n\r\n¿Cuál es la diferencia entre un objeto en estado estático al cual se le aplica un impulso y uno que está en la posición del péndulo?'),
(2, 'efp1', 'EFP - Esferas con mismo diámetro, mismas cuerdas y sujetadas en el centro', 'Este es un conjunto de prácticas para establecer la influencia del peso y la distancia respecto a una Fuerza dada. En este caso se tienen dos esferas que están sujetas a una barra mediante una Cuerda cada una. La barra está sostenida por otra Cuerda, la cual tiene sujeto un dinamómetro para medir las fuerzas que se ejercen. La Masa de cada Esfera es diferente y afectará a la barra dependiendo de su peso.\r\n\r En esta primera práctica se tienen las esferas a la misma distancia del centro, las cuerdas son de la misma longitud y las masas será lo que se variará para ver su efecto. Más adelante se tendrá variación en la longitud de las cuerdas, el diámetro de las esferas y la posición de la Cuerda que sujeta a la barra (no estará centrada). \r\n\r La teoría a lo que es un dinamómetro se encuentra en la siguiente práctica.\r\n\r\nEFP - Esferas con mismo diámetro, mismas cuerdas y sujetadas en el centro\r\n\r\nEFP- Una de las cuerdas es más corta\r\n\r\nEFP - La barra no está sujeta al centro\r\n\r\nEFP - La Cuerda de la Esfera amarilla es más corta, la barra no está en el centro\r\n\r\nEFP - Similar a la anterior pero con la Esfera azul\r\n\r\nEFP - El diámetro de la Esfera azul es mayor\r\n\r\nEFP - El diámetro de la Esfera amarilla es mayor', NULL, 'La Masa de la Esfera amarilla es de 2, mientras que la otra Esfera tiene Masa de 1. \r\n¿Puede deducir que sucederá cuando inicie la práctica? \r\n\r\nVaya al botón de <<Propiedades Iniciales>> y cambie la Masa de la Esfera amarilla por 1\r\nRepita la animación\r\n\r\nVaya al botón de <<Propiedades Iniciales>> y cambie la Masa de la Esfera amarilla por 3\r\nRepita la animación\r\n\r\nAhora ponga la Masa de la Esfera azul en 3 al igual que la Esfera amarilla\r\n¿Puede predecir que sucederá?\r\n\r\nRepita la animación y constate los resultados\r\nPonga las masas de ambas esferas en 1, 4 y 8\r\n¿Cuál será la diferencia en estos tres casos?\n\nOBJETIVO\r\n\r\nDeterminar la influencia que tiene Sobre el sistema la longitud de la Cuerda, la Masa del Objeto y el diámetro de la Esfera en diferentes condiciones.', 'Alumno:\r\n\r\n¿Cuál es el efecto de la Masa en el experimento?\r\n\r\nExplique los resultados obtenidos\r\n\r\nJustifique matemáticamente sus observaciones.\r\n\r\nCalcule cual será el punto de equilibrio si la barra no se encuentra sujeta en el centro por el dinamómetro'),
(3, 'efp2', 'EFP- Una de las cuerdas es más corta', 'DINAMÓMETRO\r\n\r\nSe denomina dinamómetro a un operador técnico o instrumento inventado y fabricado que sirve para medir fuerzas. Fue inventado por Isaac Newton y no debe confundirse con la balanza, instrumento utilizado para medir masas.\r\n\r\nNormalmente, un dinamómetro basa su funcionamiento en un Resorte que sigue la Ley de Hooke, siendo las deformaciones proporcionales a la Fuerza aplicada.\r\n\r\nEstos instrumentos consisten generalmente en un muelle contenido en un Cilindro de plástico, cartón o metal generalmente, con dos ganchos, uno en cada extremo. Los dinamómetros llevan marcada una escala, en unidades de Fuerza, en el Cilindro hueco que rodea el muelle. Al colgar pesos o ejercer una Fuerza Sobre el gancho inferior, el cursor del Cilindro inferior se mueve Sobre la escala exterior, indicando el valor de la Fuerza.\r\n\r\nLos muelles que forman los dinamómetros tienen un límite de Elasticidad. Si se aplican fuerzas muy grandes y se producen alargamientos excesivos, se puede sobrepasar el límite de Elasticidad y sufrir el muelle una deformación permanente, con lo que se inutilizaría el dinamómetro.\r\n\r\nLos dinamómetros los incorporan las máquinas de ensayo de materiales cuando son sometidos a diferentes esfuerzos, principalmente el ensayo de tracción, porque miden la Fuerza de rotura que rompen las probetas de ensayo.\r\n\r\nEl dinamómetro es un instrumento que sirve para medir la Fuerza.', NULL, 'Modificar la Masa de los Cuerpos, así como factores tales como la Fuerza de Gravedad y observar las medida de la Fuerza en el dinamómetro.', NULL),
(4, 'efp3', 'EFP - La barra no está sujeta al centro', 'DINAMÓMETRO\r\n\r\nSe denomina dinamómetro a un operador técnico o instrumento inventado y fabricado que sirve para medir fuerzas. Fue inventado por Isaac Newton y no debe confundirse con la balanza, instrumento utilizado para medir masas.\r\n\r\nNormalmente, un dinamómetro basa su funcionamiento en un Resorte que sigue la Ley de Hooke, siendo las deformaciones proporcionales a la Fuerza aplicada.\r\n\r\nEstos instrumentos consisten generalmente en un muelle contenido en un Cilindro de plástico, cartón o metal generalmente, con dos ganchos, uno en cada extremo. Los dinamómetros llevan marcada una escala, en unidades de Fuerza, en el Cilindro hueco que rodea el muelle. Al colgar pesos o ejercer una Fuerza Sobre el gancho inferior, el cursor del Cilindro inferior se mueve Sobre la escala exterior, indicando el valor de la Fuerza.\r\n\r\nLos muelles que forman los dinamómetros tienen un límite de Elasticidad. Si se aplican fuerzas muy grandes y se producen alargamientos excesivos, se puede sobrepasar el límite de Elasticidad y sufrir el muelle una deformación permanente, con lo que se inutilizaría el dinamómetro.\r\n\r\nLos dinamómetros los incorporan las máquinas de ensayo de materiales cuando son sometidos a diferentes esfuerzos, principalmente el ensayo de tracción, porque miden la Fuerza de rotura que rompen las probetas de ensayo.\r\n\r\nEl dinamómetro es un instrumento que sirve para medir la Fuerza.', NULL, 'Modificar la Masa de los Cuerpos, así como factores tales como la Fuerza de Gravedad y observar las medida de la Fuerza en el dinamómetro.', NULL),
(5, 'efp4', 'EFP - La Cuerda de la Esfera amarilla es más corta, la barra no está en el centro', 'DINAMÓMETRO\r\n\r\nSe denomina dinamómetro a un operador técnico o instrumento inventado y fabricado que sirve para medir fuerzas. Fue inventado por Isaac Newton y no debe confundirse con la balanza, instrumento utilizado para medir masas.\r\n\r\nNormalmente, un dinamómetro basa su funcionamiento en un Resorte que sigue la Ley de Hooke, siendo las deformaciones proporcionales a la Fuerza aplicada.\r\n\r\nEstos instrumentos consisten generalmente en un muelle contenido en un Cilindro de plástico, cartón o metal generalmente, con dos ganchos, uno en cada extremo. Los dinamómetros llevan marcada una escala, en unidades de Fuerza, en el Cilindro hueco que rodea el muelle. Al colgar pesos o ejercer una Fuerza Sobre el gancho inferior, el cursor del Cilindro inferior se mueve Sobre la escala exterior, indicando el valor de la Fuerza.\r\n\r\nLos muelles que forman los dinamómetros tienen un límite de Elasticidad. Si se aplican fuerzas muy grandes y se producen alargamientos excesivos, se puede sobrepasar el límite de Elasticidad y sufrir el muelle una deformación permanente, con lo que se inutilizaría el dinamómetro.\r\n\r\nLos dinamómetros los incorporan las máquinas de ensayo de materiales cuando son sometidos a diferentes esfuerzos, principalmente el ensayo de tracción, porque miden la Fuerza de rotura que rompen las probetas de ensayo.\r\n\r\nEl dinamómetro es un instrumento que sirve para medir la Fuerza.', NULL, 'Modificar la Masa de los Cuerpos, así como factores tales como la Fuerza de Gravedad y observar las medida de la Fuerza en el dinamómetro.', NULL),
(6, 'efp5', 'EFP - Similar a la anterior pero con la Esfera azul', 'DINAMÓMETRO\r\n\r\nSe denomina dinamómetro a un operador técnico o instrumento inventado y fabricado que sirve para medir fuerzas. Fue inventado por Isaac Newton y no debe confundirse con la balanza, instrumento utilizado para medir masas.\r\n\r\nNormalmente, un dinamómetro basa su funcionamiento en un Resorte que sigue la Ley de Hooke, siendo las deformaciones proporcionales a la Fuerza aplicada.\r\n\r\nEstos instrumentos consisten generalmente en un muelle contenido en un Cilindro de plástico, cartón o metal generalmente, con dos ganchos, uno en cada extremo. Los dinamómetros llevan marcada una escala, en unidades de Fuerza, en el Cilindro hueco que rodea el muelle. Al colgar pesos o ejercer una Fuerza Sobre el gancho inferior, el cursor del Cilindro inferior se mueve Sobre la escala exterior, indicando el valor de la Fuerza.\r\n\r\nLos muelles que forman los dinamómetros tienen un límite de Elasticidad. Si se aplican fuerzas muy grandes y se producen alargamientos excesivos, se puede sobrepasar el límite de Elasticidad y sufrir el muelle una deformación permanente, con lo que se inutilizaría el dinamómetro.\r\n\r\nLos dinamómetros los incorporan las máquinas de ensayo de materiales cuando son sometidos a diferentes esfuerzos, principalmente el ensayo de tracción, porque miden la Fuerza de rotura que rompen las probetas de ensayo.\r\n\r\nEl dinamómetro es un instrumento que sirve para medir la Fuerza.', NULL, 'Modificar la Masa de los Cuerpos, así como factores tales como la Fuerza de Gravedad y observar las medida de la Fuerza en el dinamómetro.', NULL),
(7, 'efp6', 'EFP - El diámetro de la Esfera azul es mayor', 'DINAMÓMETRO\r\n\r\nSe denomina dinamómetro a un operador técnico o instrumento inventado y fabricado que sirve para medir fuerzas. Fue inventado por Isaac Newton y no debe confundirse con la balanza, instrumento utilizado para medir masas.\r\n\r\nNormalmente, un dinamómetro basa su funcionamiento en un Resorte que sigue la Ley de Hooke, siendo las deformaciones proporcionales a la Fuerza aplicada.\r\n\r\nEstos instrumentos consisten generalmente en un muelle contenido en un Cilindro de plástico, cartón o metal generalmente, con dos ganchos, uno en cada extremo. Los dinamómetros llevan marcada una escala, en unidades de Fuerza, en el Cilindro hueco que rodea el muelle. Al colgar pesos o ejercer una Fuerza Sobre el gancho inferior, el cursor del Cilindro inferior se mueve Sobre la escala exterior, indicando el valor de la Fuerza.\r\n\r\nLos muelles que forman los dinamómetros tienen un límite de Elasticidad. Si se aplican fuerzas muy grandes y se producen alargamientos excesivos, se puede sobrepasar el límite de Elasticidad y sufrir el muelle una deformación permanente, con lo que se inutilizaría el dinamómetro.\r\n\r\nLos dinamómetros los incorporan las máquinas de ensayo de materiales cuando son sometidos a diferentes esfuerzos, principalmente el ensayo de tracción, porque miden la Fuerza de rotura que rompen las probetas de ensayo.\r\n\r\nEl dinamómetro es un instrumento que sirve para medir la Fuerza.', NULL, 'Modificar la Masa de los Cuerpos, así como factores tales como la Fuerza de Gravedad y observar las medida de la Fuerza en el dinamómetro.', NULL),
(8, 'efp7', 'EFP - El diámetro de la Esfera amarilla es mayor', 'DINAMÓMETRO\r\n\r\nSe denomina dinamómetro a un operador técnico o instrumento inventado y fabricado que sirve para medir fuerzas. Fue inventado por Isaac Newton y no debe confundirse con la balanza, instrumento utilizado para medir masas.\r\n\r\nNormalmente, un dinamómetro basa su funcionamiento en un Resorte que sigue la Ley de Hooke, siendo las deformaciones proporcionales a la Fuerza aplicada.\r\n\r\nEstos instrumentos consisten generalmente en un muelle contenido en un Cilindro de plástico, cartón o metal generalmente, con dos ganchos, uno en cada extremo. Los dinamómetros llevan marcada una escala, en unidades de Fuerza, en el Cilindro hueco que rodea el muelle. Al colgar pesos o ejercer una Fuerza Sobre el gancho inferior, el cursor del Cilindro inferior se mueve Sobre la escala exterior, indicando el valor de la Fuerza.\r\n\r\nLos muelles que forman los dinamómetros tienen un límite de Elasticidad. Si se aplican fuerzas muy grandes y se producen alargamientos excesivos, se puede sobrepasar el límite de Elasticidad y sufrir el muelle una deformación permanente, con lo que se inutilizaría el dinamómetro.\r\n\r\nLos dinamómetros los incorporan las máquinas de ensayo de materiales cuando son sometidos a diferentes esfuerzos, principalmente el ensayo de tracción, porque miden la Fuerza de rotura que rompen las probetas de ensayo.\r\n\r\nEl dinamómetro es un instrumento que sirve para medir la Fuerza.', NULL, 'Modificar la Masa de los Cuerpos, así como factores tales como la Fuerza de Gravedad y observar las medida de la Fuerza en el dinamómetro.', NULL),
(9, 'planoinclinado1', 'Plano Inclinado 1', 'PLANO INCLINADO\r\n\r\nEl plano inclinado permitió a Galileo hacer mediciones más fácilmente de la Gravedad.  \r\n\r\nEl plano inclinado es una superficie plana que forma un ángulo agudo con el Suelo y se utiliza para elevar Cuerpos a cierta altura.\r\nImaginemos que queremos arrastrar el peso G desde una altura 1 hasta una altura 2; siendo las posiciones 1 y 2 a las que nos referimos, las del centro de Gravedad del bloque representado en la figura.\r\n\r\nEl peso del bloque, que es una magnitud vectorial (vertical y hacia abajo), puede descomponerse en dos componentes, F1 y F2, paralelo y perpendicular al plano inclinado respectivamente, siendo:\r\n\r\nF1 = G·sen(a) \r\nF2 = G·cos(a) \r\n\r\nAdemás, la superficie del plano inclinado genera una Fuerza de rozamiento FR que también deberemos vencer para poder desplazarlo. Esta Fuerza es:\r\nFR = µ·F2 = µ·G·cos(a) / siendo µ el coeficiente de rozamiento. \r\n\r\nAnalizando la figura, es evidente que para conseguir desplazar el bloque, la Fuerza (F) que deberemos aplicar, será:\r\n\r\nF = F1 + FR = G·sen(a) + µ·G·cos(a) = [sen(a) + µ·cos(a)]·G \r\n\r\nSi en vez del utilizar el plano inclinado, tratáramos de levantar el bloque verticalmente, la Fuerza (G) que tendríamos que aplicar sería la del peso del bloque debido a la Fuerza de la Gravedad, es decir\r\nG = P \r\n', NULL, 'Se cuenta con dos esferas de misma masa, unidas por una cuerda y una polea. Una de las esferas está sobre un plano inclinado y ejercen sobre ella la fuerza de gravedad y la fuerza creada por el peso de la otra esfera unida a ella por medio de una polea que transfiere y altera la dirección de la fuerza. El plano se encuentra a 45º  \r\n\r\nPoner en marcha la práctica y graficar la posición de la esfera roja en su eje Žy` respecto al tiempo\r\nCambiar la masa de la esfera roja por 2\r\nRepetir la gráfica anterior\r\nCambiar la masa de la esfera amarilla por 2 y luego por 3\r\nGraficar nuevamente la posición de la esfera roja en su eje Žy`\r\n\r\nRegresar la masa de la esfera roja a 1\r\nGraficar la posición de la esfera amarilla en su eje Žx`\r\nCambiar la masa de la esfera amarilla a 2 y repetir la práctica\r\nPoner ambas masas en 2 y repetir la gráfica\r\nPoner la masa roja en 2 y la amarilla en 1, graficar\r\n\nOBJETIVO:\r\n\r\nAnalizar el efecto del plano inclinado en un cuerpo que está sujeto a una dos fuerzas diferentes.', 'Alumno:\r\n\r\n¿Cuál podría ser la influencia si cambiamos la fricción de la esfera amarilla?\r\n\r\n¿Cuál será el efecto si cambiamos la inclinación del plano?\r\n\r\n¿Cuánto tiempo tarda la esfera roja en realizar un ciclo en cada uno de los casos?'),
(10, 'planoinclinado2', 'Plano Inclinado 2', 'PLANO INCLINADO\r\n\r\nEl plano inclinado permitió a Galileo hacer mediciones más fácilmente de la Gravedad.  \r\n\r\nEl plano inclinado es una superficie plana que forma un ángulo agudo con el Suelo y se utiliza para elevar Cuerpos a cierta altura.\r\nImaginemos que queremos arrastrar el peso G desde una altura 1 hasta una altura 2; siendo las posiciones 1 y 2 a las que nos referimos, las del centro de Gravedad del bloque representado en la figura.\r\n\r\nEl peso del bloque, que es una magnitud vectorial (vertical y hacia abajo), puede descomponerse en dos componentes, F1 y F2, paralelo y perpendicular al plano inclinado respectivamente, siendo:\r\n\r\nF1 = G·sen(a) \r\nF2 = G·cos(a) \r\n\r\nAdemás, la superficie del plano inclinado genera una Fuerza de rozamiento FR que también deberemos vencer para poder desplazarlo. Esta Fuerza es:\r\nFR = µ·F2 = µ·G·cos(a) / siendo µ el coeficiente de rozamiento. \r\n\r\nAnalizando la figura, es evidente que para conseguir desplazar el bloque, la Fuerza (F) que deberemos aplicar, será:\r\n\r\nF = F1 + FR = G·sen(a) + µ·G·cos(a) = [sen(a) + µ·cos(a)]·G \r\n\r\nSi en vez del utilizar el plano inclinado, tratáramos de levantar el bloque verticalmente, la Fuerza (G) que tendríamos que aplicar sería la del peso del bloque debido a la Fuerza de la Gravedad, es decir\r\nG = P \r\n', NULL, 'Se cuenta con dos esferas de misma Masa, unidas por una Cuerda y una Polea. Una de las esferas está Sobre un plano inclinado y ejercen Sobre ella la Fuerza de Gravedad y la Fuerza creada por el peso de la otra Esfera unida a ella por medio de una Polea que transfiere y altera la dirección de la Fuerza. El plano se encuentra a 30º  \r\n\r\nPoner en marcha la práctica y graficar la posición de la Esfera roja en su eje Žy` respecto al tiempo\r\nCambiar la Masa de la Esfera roja por 2\r\nRepetir la gráfica anterior\r\nCambiar la Masa de la Esfera amarilla por 2 y luego por 3\r\nGraficar nuevamente la posición de la Esfera roja en su eje Žy`\r\n\r\nRegresar la Masa de la Esfera roja a 1\r\nGraficar la posición de la Esfera amarilla en su eje Žx`\r\nCambiar la Masa de la Esfera amarilla a 2 y repetir la práctica\r\nPoner ambas masas en 2 y repetir la gráfica\r\nPoner la Masa roja en 2 y la amarilla en 1, graficar\n\nOBJETIVO:\r\n\r\nAnalizar el efecto del plano inclinado al cambiar su inclinación.', 'Alumno:\r\n\r\n¿Cuáles son las diferencias que observa con respecto a la práctica anterior?\r\n\r\n¿Cuál podría ser la influencia si cambiamos la fricción de la Esfera amarilla?\r\n\r\n¿Cuál será el efecto si cambiamos la inclinación del plano?\r\n\r\n¿Cuánto tiempo tarda la Esfera roja en realizar un ciclo en cada uno de los casos?\r\n\r\n¿Qué sucede si además de la Masa, cambiamos la Fuerza de Gravedad?\r\n\r\nDeduzca lo que sucederá al aplicar un Impulso o una Fuerza a la Esfera roja'),
(11, 'planoinclinado3', 'Plano Inclinado 3', 'PLANO INCLINADO\r\n\r\nEl plano inclinado permitió a Galileo hacer mediciones más fácilmente de la Gravedad.  \r\n\r\nEl plano inclinado es una superficie plana que forma un ángulo agudo con el Suelo y se utiliza para elevar Cuerpos a cierta altura.\r\nImaginemos que queremos arrastrar el peso G desde una altura 1 hasta una altura 2; siendo las posiciones 1 y 2 a las que nos referimos, las del centro de Gravedad del bloque representado en la figura.\r\n\r\nEl peso del bloque, que es una magnitud vectorial (vertical y hacia abajo), puede descomponerse en dos componentes, F1 y F2, paralelo y perpendicular al plano inclinado respectivamente, siendo:\r\n\r\nF1 = G·sen(a) \r\nF2 = G·cos(a) \r\n\r\nAdemás, la superficie del plano inclinado genera una Fuerza de rozamiento FR que también deberemos vencer para poder desplazarlo. Esta Fuerza es:\r\nFR = µ·F2 = µ·G·cos(a) / siendo µ el coeficiente de rozamiento. \r\n\r\nAnalizando la figura, es evidente que para conseguir desplazar el bloque, la Fuerza (F) que deberemos aplicar, será:\r\n\r\nF = F1 + FR = G·sen(a) + µ·G·cos(a) = [sen(a) + µ·cos(a)]·G \r\n\r\nSi en vez del utilizar el plano inclinado, tratáramos de levantar el bloque verticalmente, la Fuerza (G) que tendríamos que aplicar sería la del peso del bloque debido a la Fuerza de la Gravedad, es decir\r\nG = P \r\n', NULL, 'Mofificar las Masas de los Cuerpos así como la inclinación del plano y registrar los resultados.', ''),
(12, 'aceleracion', 'Aceleración', 'ACELERACIÓN \r\n\r\nEn general, la Velocidad de un cuerpo es una función del tiempo. Supongamos que en un instante t la Velocidad del móvil es v, y en el instante t'' la velocidad del móvil es v''. Se denomina aceleración media entre los instantes t y t'' al cociente entre el cambio de velocidad Dv=v''-v y el intervalo de tiempo en el que se ha tardado en efectuar dicho cambio, Dt=t''-t.\r\nLa aceleración en el instante t es el límite de la aceleración media cuando el intervalo Dt tiende a cero, que es la definición de la derivada de v.\r\n\r\nEs importante comprender la relación que guarda la aceleración de un cuerpo con su Masa y la Fuerza que se le aplica. Para esta práctiac habrá que tener en cuenta el lugar donde se desempeña, ya que no es lo mismo la Gravedad de la Tierra o de otro planeta. Estos parámetros se pueden cambiar dentro del mismo simulador.\r\n\r\nFuerza de Gravedad\r\n\r\nEl término «Gravedad» se utiliza también para designar la intensidad del fenómeno gravitatorio en la superficie de la Tierra. Todos los Cuerpos experimentan una Fuerza de atracción por el simple hecho de tener Masa. En el ámbito cotidiano, esta Fuerza equivale al peso; en este caso, la Masa del Objeto y la Masa de la Tierra se atraen, y el Objeto queda sometido a una Fuerza dirigida hacia el centro de la Tierra. Según la Segunda Ley de Newton, la Fuerza a aplicada al Objeto es directamente proporcional al producto de su Masa y su aceleración:\r\n\r\nF=ma\r\n\r\nCuando se trata de la Fuerza «peso», esta aceleración se designa por g y se le llama aceleración de la Gravedad:\r\n\r\nP=mg\r', NULL, 'Fuerza de Gravedad\r\n1. Correr la práctica oprimiendo Sobre el botón <<Comenzar>> (triángulo verde) con Fuerza de Gravedad = cero, que es como viene definida la práctica.\r\n2. Cambiar el dato de Fuerza de Gravedad por -9.81, que es la Fuerza de Gravedad en La Tierra, esto se hace en el botón <<Mundo>>. Sacar sus conclusiones\r\n3. Graficar la posición de la Esfera en el eje ?y?. Para esto, dar clic en el botón <<monitor>>, seleccionar <<posición>> y en el botón que nos permite seleccionar el eje, poner `yŽ; darle un Nombre a la gráfica como <<F-tierra>>.\r\n4. Anota los valores relevantes y saca tus conclusiones\r\n5. Cambiar el dato de Fuerza de Gravedad para los diferentes planetas, esto se hace en el botón <<Mundo>>.\r\n\r\n Fuerza de Gravedad en otros planetas\r\nDe Mercurio es de -3.7 m/s². \r\nDe Venus es de -8.9 m/s²\r\nDe la Tierra es de -9.81 m/s²\r\nDe Marte es de -3.7 m/s²\r\nDe Júpiter es de -23.12 \r\nDe Saturno es de -8.96 m/s²\r\nDe Urano es de -8.7 m/s²\r\nDe Neptuno -11.0 m/s² \r\nDe Plutón es de -0.6 m/s² \r\n\r\nMasa\r\n1. Reiniciar los valores de la práctica o cargarla nuevamente.\r\n2. Correr la práctica oprimiendo Sobre el botón <<Comenzar>> (triángulo verde) con Masa 18.849 (que es el valor que trae de inicio). \r\n3. Anotar los valores relevantes\r\n4. Cambiar el valor de la Masa por 1, 10, 30 y 50 y sacar sus conclusiones\r\n\r\nPROCEDIMIENTO PARA Fuerza APLICADA\r\n1. Reiniciar los valores de la práctica o cargarla nuevamente.\r\n2. Correr la práctica oprimiendo Sobre el botón <<Comenzar>> (triángulo verde) con Fuerza de Gravedad = cero, que es como viene definida la práctica.\r\n3. Cambiar los valores iniciales de la Fuerza en el eje `xŽ por 1, 6 y 10\r\n4. Sacar sus conclusiones.\r\n\r\nPuede combinar las prácticas alterando el valor de la Fuerza de Gravedad, la Masa y la Fuerza al mismo tiempo, esto le dará una visión más real de lo que sucede en cada caso.\r\n\nOBJETIVO\r\nVer cómo influye en un cuerpo diferentes variables como la Masa, la Fuerza aplicada al cuerpo y la Fuerza de Gravedad.', 'Alumno:\r\n\r\n¿Cómo influye la Masa en este experimento?\r\n\r\n¿Cómo influye la Fuerza de Gravedad en un cuerpo?\r\n\r\n¿Qué sucede cuando hay cambio de Gravedad?\r\n\r\n¿En qué planeta la Fuerza de Gravedad influye más?\r\n\r\n¿Cómo influye la Fuerza que se aplica al cuerpo de manera inicial?\r\n\r\n¿Qué sucede si le aplicamos una Fuerza en el eje < x >, pero negativa?\r\n\r\n¿Qué sucede si le aplicamos una Fuerza en el eje < y >, tanto negativa como positiva?\r\n\r\nHaga un cuadro para compara la Fuerza de Gravedad en los diferentes planetas'),
(13, 'caidalibre', 'Caida Libre', 'CAÍDA LIBRE\r\n\r\nLa caída libre es un movimiento de un cuerpo dentro del campo gravitatorio terrestre.\r\n\r\nSi en este movimiento se desprecia el rozamiento del cuerpo con el aire, es decir, se estudia en el vacío. El movimiento de la caída libre es un movimiento uniformemente acelerado. Para caídas desde alturas de sólo unos pocos kilómetros o metros, la aceleración instantánea debida sólo a la Gravedad es casi independiente de la Masa del cuerpo, es decir, si dejamos caer un coche y una pulga, ambos Cuerpos tendrán la misma aceleración, que coincide con la aceleración de la Gravedad (g). Sabemos por la segunda ley de Newton que la suma de fuerzas es igual al producto entre la Masa del cuerpo y la aceleración. En caída libre sólo intervienen el peso , que siempre es vertical, y el rozamiento aerodinámico que va en la misma dirección aunque en sentido opuesto a la Velocidad. La ecuación de movimiento es por tanto:\r\n\r\nF = m (dv/dt) = P + Fr = -mgj - (fr(v)/v)V\r\nLa aceleración de la Gravedad se indica con signo negativo, porque tomamos el eje de referencia desde el Suelo hacia arriba, los vectores ascendentes los consideraremos positivos y los descendentes negativos, la aceleración de la Gravedad es descendente, por eso el signo -.\r\n\r\nAunque todo cuerpo cae a la misma Velocidad, factores como la resistencia que presenta el aire repercuten en la Velocidad. Además, aspectos como la Elasticidad permiten comportamientos peculiares en la caída libre.\r\n\r\nElasticidad\r\n\r\nLa teoría de la Elasticidad forma parte de la mecánica de sólidos deformables. La teoría de la Elasticidad, como la mecánica de sólidos deformables, describe cómo un sólido (o fluido totalmente confinado) se mueve y deforma como respuesta a fuerzas exteriores. La diferencia entre la teoría de la Elasticidad y la mecánica de sólidos es que la primera sólo trata sólidos en que las deformaciones son termodinámicamente reversibles.\r\n\rLa propiedad elástica de los materiales está relacionada con la capacidad de un sólido de sufrir transformaciones termodinámicas reversibles. Cuando Sobre un sólido deformable actúan fuerzas exteriores y éste se deforma se produce un trabajo de estas fuerzas que se almacena en el cuerpo en forma de energía potencial elástica y por tanto se producirá un aumento de la energía interna. El sólido se comportará elásticamente si este incremento de energía puede realizarse de forma reversible, en este caso decimos que el sólido es elástico.', NULL, 'Para familiarizarse con <<propiedades iniciales>>, cambie el Color de las esferas de la siguiente manera.\r\nOprima Sobre el 5º ícono, que es el de <<propiedades iniciales>>\r\nDonde dice <<Objeto>>, seleccione Metal1\r\nCambie el Color de la Esfera a rosa\r\nSeleccione en o<<Objeto>>, la Esfera Metal2\r\nCambie el Color a amarillo\r\nSeleccione en <<Objeto>>, la Esfera Metal3\r\nCambie el Color a verde\r\nSeleccione en <<Objeto>>, la Esfera  Unicel\r\nCambie el Color a azul\r\nOprima en <<Aplicar>> y ejecute la práctica\r\n \r\n¿Qué notó?\r\n¿Por qué caen unos objetos más rápido que otros?\r\n¿Qué sucede si cambia la Masa de los objetos?\r\nReportar sus conclusiones en el apartado de observaciones\r\n\r\nObtener la Gravedad de Marte, Júpiter, Saturno y Mercurio. \r\nRepetir la práctica anotando el tiempo que tarda en caer cada cuerpo\r\nGraficarlos y comparar con el ejercicio anterior\r\n\r\nTomar los datos iniciales de la práctica\r\nCambiar el valor de la Elasticidad y bajarlo 3 segmentos de la escala\r\nPoner en movimiento la práctica y ver qué sucede con la Esfera\r\nCambiar nuevamente la Elasticidad y dejarla en cero\r\nPoner en movimiento la práctica y ver qué sucede con la Esfera\r\nSacar sus conclusiones\n\nOBJETIVOS\r\nVer cómo afecta la Masa, la Fuerza de Gravedad, la fricción y la Elasticidad  en un cuerpo que se deja caer.', 'Alumno:\r\n\n¿Qué notó en la primera práctica?\r\n\r\n¿Por qué caen unos objetos más rápido que otros?\r\n\r\n¿Qué sucede si cambia la Masa de los objetos?\n\r¿Cuál es el efecto de la Elasticidad en los Cuerpos?\r\n\r\n¿Qué efecto tiene la Elasticidad en otros planetas?\r\n\r\n¿Qué sucede si ambiamos el diámetro de los Cuerpos?\n'),
(14, 'fuerzasconcurrentes', 'Fuerzas concurrentes', 'Fuerzas Concurrentes\r\n\r\nUn sistema de fuerzas concurrentes es aquel para el cual existe un punto en común para todas las rectas de acción de las fuerzas componentes. La resultante es el elemento más simple al cual puede reducirse un sistema de fuerzas. Como simplificación diremos que es una Fuerza que reemplaza a un sistema de fuerzas. Se trata de un problema de equivalencia por composición, ya que los dos sistemas (las fuerzas componentes por un lado, y la Fuerza resultante, por el otro) producen el mismo efecto Sobre un cuerpo.\r\n\r\nEn esta práctica se observa el efecto de 2 Fuerzas Sobre 1 Cuerpo. Las Fuerzas resultan de la caída de un cuerpo unido a otros 2 a través de poleas.\r\n\r\nPolea\r\n\r\nUna Polea, también llamada garrucha, carrucha, trocla, trócola o carrillo, es una máquina simple que sirve para transmitir una Fuerza.\r\n\r\nSe trata de una rueda, generalmente maciza y acanalada en su borde, que, con la ayuda de una Cuerda o cable que se hace pasar por el canal (garganta), y se usa como elemento de transmisión para cambiar la dirección del movimiento en máquinas y mecanismos; además formando conjuntos, sirve para reducir la magnitud de la Fuerza necesaria para mover un peso, variando su Velocidad.\r\n\r\nSegún definición de Hatón de la Goupillière: «la Polea es el punto de apoyo de una Cuerda que moviéndose se arrolla Sobre ella sin dar una vuelta completa» actuando en uno de sus extremos la resistencia y en otro la potencia.', NULL, 'Las condiciones iniciales de la práctica son: La Masa de la Esfera naranja y de la Esfera azul es de 1, la Esfera amarilla pesa 2. La Esfera naranja y la azul están unidas a la amarilla mediante cuerdas con poleas. Al poner la práctica en funcionamiento, la Esfera amarilla, que pesa más jalará a las otras dos hasta el punto de equilibrio.\n\nSeleccionar la Esfera amarilla y graficarla en su posición Sobre el eje ''y''\n\nCambiar el valor de la Esfera azul por Masa = 3\n\nDeducir que sucederá con la Esfera naranja, azul y amarilla\n\nVerificar el resultado y graficar la posición de la Esfera amarilla Sobre el eje ''y''\n\nRegresar el valor de la Masa de la Esfera azul a 1\n\nCambiar la Masa de la Esfera amarilla por 1.5, 1.2 y 1 sucesivamente\n\nCalcular cual es el valor en el cual notará que la Esfera amarilla ya no jalará a las otras dos\n\nOBJETIVO:\n\nAnalizar el comportamiento de los Cuerpos que están sujetos a dos o más fuerzas al mismo tiempo.', 'Alumno:\n\n¿Por qué la esfera amarilla jala a las otras dos aun cuando pesa menos?\n\n¿Por qué llega un momento en que ya no las puede jalar?\n\n¿Cuál es el efecto de cambiar las masas de la esfera naranja y azul por valores iguales?\n\n¿Qué sucede en el eje ''x'' y en el eje ''y'' al graficar sobre la esfera naranja?\n\n¿Qué puede deducir de las gráficas obtenidas?'),
(15, 'friccion1', 'Fricción 1', 'La fricción es el roce que se produce entre dos Cuerpos, esto genera una Fuerza que se opone al movimiento de un cuerpo.\r\n\r\nSe define como Fuerza de rozamiento o Fuerza de fricción entre dos superficies en contacto a la Fuerza que se opone al movimiento de una superficie Sobre la otra (Fuerza de fricción dinámica) o a la Fuerza que se opone al inicio del movimiento (Fuerza de fricción estática). Se genera debido a las imperfecciones, especialmente microscópicas, entre las superficies en contacto. Estas imperfecciones hacen que la Fuerza entre ambas superficies no sea perfectamente perpendicular a éstas, sino que forma un ángulo f con la normal (el ángulo de rozamiento). Por tanto, esta Fuerza resultante se compone de la Fuerza normal (perpendicular a las superficies en contacto) y de la Fuerza de rozamiento, paralela a las superficies en contacto.', NULL, 'El cuerpo rojo que se encuentra Sobre la mesa está sujeto a una Fuerza negativa en el eje <<x>>, esto lo obligará a ir hacia la izquierda. Como dicha Fuerza es permanente, el cuerpo se caerá tarde o temprano.\r\n \r\nCorrer la práctica y ver el tiempo que tarda el cuerpo en recorrer la mesa antes de caerse.\r\n\r\nCambiar el valor de la fuerza de Žx= - 10 por x= - 5Ž, analizar que sucede\r\n\r\nRepetir la práctica cambiando los valores de la fricción (hacer 3 casos diferentes) y sacar sus conclusiones\n\nOBJETIVO:\r\n\r\nEntender el concepto de fricción y como afecta en los Cuerpos', 'Alumno:\r\n\r\n¿Qué sucede si le aplicamos una fuerza en el eje `yŽ?\r\n\r\n¿Qué pasa si esa fuerza es negativa?\r\n\r\n¿Qué sucede si le aplicamos una fuerza en el eje `zŽ?\r\n\r\n¿Qué pasa si esa fuerza es negativa?\r\n\r\nEncuentra la magnitud de la fuerza en x para el objeto tarde 5 segundos en caer'),
(16, 'friccion2', 'Fricción 2', 'La fricción es grosso modo el roce que se produce entre dos Cuerpos, esto genera una Fuerza que se opone al movimiento de un cuerpo.\r\n\r\nSe define como Fuerza de rozamiento o Fuerza de fricción entre dos superficies en contacto a la Fuerza que se opone al movimiento de una superficie Sobre la otra (Fuerza de fricción dinámica) o a la Fuerza que se opone al inicio del movimiento (Fuerza de fricción estática). Se genera debido a las imperfecciones, especialmente microscópicas, entre las superficies en contacto. Estas imperfecciones hacen que la Fuerza entre ambas superficies no sea perfectamente perpendicular a éstas, sino que forma un ángulo f con la normal (el ángulo de rozamiento). Por tanto, esta Fuerza resultante se compone de la Fuerza normal (perpendicular a las superficies en contacto) y de la Fuerza de rozamiento, paralela a las superficies en contacto.', NULL, 'El cuerpo rojo que se encuentra Sobre la mesa está sujeto a una Fuerza negativa en el eje <<x>>, esto lo obligará a ir hacia la izquierda. Como dicha Fuerza es permanente, el cuerpo se caerá tarde o temprano. En este caso, se cambiará la Masa del cuerpo.\r\n \r\nCorrer la práctica y ver el tiempo que tarda el cuerpo en recorrer la mesa antes de caerse.\r\n\r\nCambiar el valor de la masa por 2, 4 y 6, analizar que sucede\r\n\r\nInducir lo que sucederá para valores de masa igual a 8 y 10\r\n\r\nRepetir la práctica cambiando los valores de la fricción (hacer 3 casos diferentes) y sacar sus conclusiones\n\nOBJETIVO:\r\n\r\nVer el efecto que tiene el cambio de masa relacionado con la fricción.', 'Alumno:\r\n\r\n¿Cuál es el efecto de la fricción?\r\n\r\n¿Por qué caen unos objetos más rápido que otros?\r\n\r\n¿Qué sucede si cambia la Masa de los objetos?\r\n\r\n\r\nObtener la gravedad de Marte, Júpiter, Saturno y Mercurio. \r\n\r\nRepetir la práctica anotando el tiempo que tarda en caer cada cuerpo\r\n\r\nGraficarlos y comparar con el ejercicio anterior'),
(17, 'fuerzas1', 'Fuerzas 1', 'Fuerzas \r\n\r\nSe le llama Fuerza a cualquier acción o influencia capaz de modificar el estado de movimiento o de reposo de un cuerpo, es decir, de imprimirle una aceleración modificando la Velocidad, la dirección o el sentido de su movimiento.\r\n\r\nEn esta práctica se observa la Fuerza que ejerce la Gravedad Sobre un cuerpo con ayuda del dinamómetro.', NULL, 'Desde el menú de <<Mundo>>, modificar los valores de Gravedad para observar los resultados que arroja el dinamómetro.\r\n\r\nCambiar la Fuerza de Gravedad para observar el comportamiento del péndulo.\r\nLa Gravedad de la Tierra es de -9.81, \r\nLa Gravedad de la Luna es de -1.62\r\nLa Gravedad de Mercurio es de -2.78\r\nLa Gravedad de Venus es de -8.87\r\nLa Gravedad de Marte es de -3.71\r\nLa Gravedad de Júpiter es de -23.12\r\nLa Gravedad de Urano es de -8.69\r\nLa Gravedad de Neptuno es de -11\r\n\r\nCambiar los datos de la Masa y repetir el experimento\n\nOBJETIVO:\r\n\r\nVer la influencia que tiene la Fuerza de Gravedad en los Cuerpos tomando en cuenta su Masa', 'Alumno:\r\n\r\n¿Qué es lo que puede deducir respecto a la influencia de la Gravedad en los diferentes planetas? \r\n\r\nHaga un ensayo de lo que sucedería en nuestro planeta si la Fuerza de Gravedad fuera la de Júpiter, o bien la de la Luna. \r\n\r\n¿Cómo afectaría a la vida diaria?\r\n\r\n¿Qué repercusiones tendría en la construcción?\r\n\r\n¿Por qué la Fuerza de Gravedad es tan diferente en planetas como Mercurio y Venus que están más cerca del Sol  y bastante similares entre Urano y Venus que se encuentran muy lejanos entre sí?'),
(18, 'fuerzas2', 'Fuerzas 2', 'Se le llama Fuerza a cualquier acción o influencia capaz de modificar el estado de movimiento o de reposo de un cuerpo, es decir, de imprimirle una aceleración modificando la Velocidad, la dirección o el sentido de su movimiento.\r\n\r\nEs interesante observar la Fuerza que ejerce la  Gravedad Sobre un cuerpo con ayuda del dinamómetro. En esta práctica la Fuerza se reparte en 2 dinamómetros.', NULL, 'Poner la práctica en movimiento y tomar los valores de los dinamómetros\r\n\r\nCambiar la Masa por un peso de 2, 3 y 4, tomar los resultados\r\n\r\nDeducir el valor de la Fuerza leída por el dinamómetro al cambiar la Masa por 6, 8 y 10 \r\n\r\nVerificar los datos\r\n\r\nCambiar el valor de la Velocidad en x=2, medir los resultados\r\n\r\nCambiar el valor de la Velocidad en y=2,  medir los resultados\r\n\r\nCambiar el valor de la Velocidad en z=2,  medir los resultados', 'Alumno:\r\n\r\n¿Cuál es el efecto de la Masa en el eje x?\r\n\r\n¿Cuál es el efecto de la Masa en el eje y?\r\n\r\n¿Cuál es el efecto de la Masa en el eje z?\r\n\r\n¿Cuál es el efecto de la Velocidad en el eje x?\r\n\r\n¿Cuál es el efecto de la Velocidad en el eje y?\r\n\r\n¿Cuál es el efecto de la Velocidad en el eje z?'),
(19, 'fierzas3', 'Fuerzas 3', 'Se le llama Fuerza a cualquier acción o influencia capaz de modificar el estado de movimiento o de reposo de un cuerpo, es decir, de imprimirle una aceleración modificando la Velocidad, la dirección o el sentido de su movimiento.\r\n\r\nEs interesante observar la Fuerza que ejerce la  Gravedad Sobre un cuerpo con ayuda del dinamómetro. En esta práctica la Fuerza se reparte en 2 dinamómetros con posición diferente a la práctica anterior.\r\n\r\nComparar los resultados de esta práctica con Fuerza 2 y sacar sus conclusiones', NULL, 'Poner la práctica en movimiento y tomar los valores de los dinamómetros\r\n\r\nCambiar la Masa por un peso de 2, 3 y 4, tomar los resultados\r\n\r\nDeducir el valor de la Fuerza leída por el dinamómetro al cambiar la Masa por 6, 8 y 10 \r\n\r\nVerificar los datos\r\n\r\nCambiar el valor de la Velocidad en x=2, medir los resultados\r\n\r\nCambiar el valor de la Velocidad en y=2,  medir los resultados\r\n\r\nCambiar el valor de la Velocidad en z=2,  medir los resultados', 'Alumno:\r\n\r\n¿Cuál es el efecto de la Masa en el eje x?\r\n\r\n\r\n¿Cuál es el efecto de la Masa en el eje y?\r\n\r\n\r\n¿Cuál es el efecto de la Masa en el eje z?\r\n\r\n\r\n¿Cuál es el efecto de la Velocidad en el eje x?\r\n\r\n\r\n¿Cuál es el efecto de la Velocidad en el eje y?\r\n\r\n\r\n¿Cuál es el efecto de la Velocidad en el eje z?\r\n\r\n\r\n¿Cuál es la diferencia en la posición de los dinamómetros con respecto a la práctica anterior?'),
(20, 'mru', 'Movimiento Rectilinio Uniforme', 'El movimiento rectilinio uniforme, es aquel que sigue una linea recta y no es afectado por Fuerza alguna que altere este movimiento.\r\n\r\nMovimiento rectilíneo uniforme\r\n\r\nSe denomina movimiento rectilíneo, aquél cuya trayectoria es una línea recta.\r\nEn la recta situamos un origen O, donde estará un observador que medirá la posición del móvil x en el instante t. Las posiciones serán positivas si el móvil está a la derecha del origen y negativas si está a la izquierda del origen.\r\n\r\nPosición \r\nLa posición x del móvil se puede relacionar con el tiempo t mediante una función x=f(t).\r\n\r\nDesplazamiento\r\nSupongamos ahora que en el tiempo t, el móvil se encuentra en posición x, más tarde, en el instante t'' el móvil se encontrará en la posición x''. Decimos que móvil se ha desplazado Dx=x''-x en el intervalo de tiempo Dt=t''-t, medido desde el instante t al instante t''.', NULL, 'Se analizará el movimiento en el eje << x >> sin Gravedad (para evitar la Fuerza de Gravedad.\r\nPara ello, entrar al menú de Propiedades Iniciales y cambiar la Velocidad en X. Graficar los diferentes valores y sacar sus conclusiones. No se recomienda cambiar los parámetros de Y o Z.\r\n\r\nEntrar al menú de <<cámara>> y mover la barra hacia la izquierda para alejar el punto de vista. Esto nos permitirá ver la práctica desde más lejos para apreciar durante más tiempo el fenómeno a graficar.\r\n\r\n\r\nCambiar la Fuerza aplicada al cuerpo en el eje X para ver cómo afecta en el mismo cuerpo.\r\nAhora, combinar los valores de 1, 4, 10 y 15 en los Ejes x, y. Deducir el resultado y graficarlos.\r\n\r\nAlejar nuevamente el punto de vista, utilizando la cámara y desplazando la barra hacia la izquierda. El tiempo que permanecerá la Esfera en la pantalla dependerá de la resolución y Velocidad de cada computadora.\r\nGraficar sus resultados\n\nOBJETIVO\r\nVer el efecto de la Velocidad Sobre un cuerpo.', 'Alumno:\r\n\r\n¿Cuál es el efecto de la Velocidad en un cuerpo?\r\n\r\n¿Cuál es la diferencia entre aplicar un Impulso y una Fuerza de la misma magnitud y sentido al cuerpo?\r\n\r\n¿Cuánto tiempo pasará la Esfera en el monitor cuando la Fuerza en Žx` es igual a 1?\r\n\r\n¿Pasará la mitad de tiempo si la Fuerza es igual a 2?\r\n\r\n¿Cuál debe de ser la Velocidad para que la Esfera desaparezca de la pantalla en 1 segundo?'),
(21, 'mua', 'Movimiento Uniformemente Acelerado', 'El movimiento uniformemente acelerado es aquel que sigue una línea recta y es afectado por una Fuerza  que altera su Velocidad, es decir lo acelera uniformemente.\r\n\r\nSe recomienda realizar primero la práctica MRU (Movimiento Rectilíneo Uniforme) para ver la teoría y tener las bases. En esta práctica se verá el efecto de la velocidad en los cuerpos.\r\n\r\nAceleración\r\nEn general, la Velocidad de un cuerpo es una función del tiempo. Supongamos que en un instante t la Velocidad del móvil es v, y en el instante t'' la velocidad del móvil es v''. Se denomina aceleración media entre los instantes t y t'' al cociente entre el cambio de velocidad Dv=v''-v y el intervalo de tiempo en el que se ha tardado en efectuar dicho cambio, Dt=t''-t.\r\n\r\nLa aceleración en el instante t es el límite de la aceleración media cuando el intervalo ?t tiende a cero, que es la definición de la derivada de v.\r\n\r\nEn física el Movimiento Uniforme Acelerado (MUA) es aquel movimiento donde la aceleración que se ejerce Sobre un cuerpo es la misma en todos sus puntos del recorrido, es decir, la aceleración es constante. El movimiento uniformemente acelerado (MUA) presenta 2 características fundamentales:\r\n\r\n1. La aceleración siempre es la misma es decir es constante \r\n\r\n2. La Velocidad siempre va aumentando y la distancia recorrida es proporcional al cuadrado del tiempo. \r\n\r\nEsto significa que aun tiempo doble, la distancia será 4 veces mayor. (2s)2 = 4 veces mayor. A un tiempo triple la distancia será 9 veces mayor. (3s)2 = 9 veces mayor.\r\n\r\nEn un movimiento uniformemente acelerado podemos calcular:\r\n· Velocidad \r\n· Aceleración \r\n· Tiempo \r\n· Distancia \r\nPara calcular distancia en un MUA se utiliza la siguiente ecuación:\r\n\r\nX = œ a t 2\r\n\r\nDónde:\r\n· X es la distancia. \r\n· a es la aceleración \r\n· t es el tiempo. ', NULL, 'Para ello, entrar al menú de Propiedades Iniciales y cambiar la Velocidad en X. Graficar los diferentes valores y sacar sus conclusiones. No se recomienda cambiar los parámetros de Y o Z.\r\n\r\nEntrar al menú de <<cámara>> y mover la barra hacia la izquierda para alejar el punto de vista. Esto nos permitirá ver la práctica desde más lejos para apreciar durante más tiempo el fenómeno a graficar.\r\n\r\n\r\nCambiar la Fuerza aplicada al cuerpo en el eje X para ver como afecta en el mismo cuerpo.\r\nAhora, combinar los valores de 1, 4, 10 y 15 en los Ejes x, y. Deducir el resultado y graficarlos\r\n\r\r\nAlejar nuevamente el punto de vista, utilizando la cámara y desplazando la barra hacia la izquierda. El tiempo que permanecerá la Esfera en la pantalla dependerá de la resolución y Velocidad de cada computadora.\n\r\r\nGraficar sus resultados\n\nOBJETIVO\r\nProbar diferentes velocidades iniciales en el eje <<x>> que afectan al cuerpo.', 'Alumno:\r\n\r\n¿Cuál es la diferencia entre aplicar una Fuerza al Objeto o una Velocidad?\r\n\r\n¿Qué sucede si se aplican ambas?\r\n\r\n¿Cuál es la diferencia entre aplicar un Impulso y una Fuerza de la misma magnitud y sentido al cuerpo?\r\n\r\n¿Cuánto tiempo pasará la Esfera en el monitor cuando la Fuerza en Žx` es igual a 1?\r\n\r\n¿Pasará la mitad de tiempo si la Fuerza es igual a 2?\r\n\r\nRealice los mismos experimentos pero ahora modifique el la Velocidad y no la Fuerza\r\n\r\nRealice los mismos experimentos pero ahora modifique el Impulso y no la Fuerza\r\n\r\n¿Cuál debe de ser la Fuerza para que la Esfera desaparezca en la esquina superior derecha?');
INSERT INTO `activity` (`activity_id`, `activity_prefix`, `title`, `description`, `objetive`, `steps`, `observations`) VALUES
(22, 'proyectiles1', 'Proyectiles 1', 'PROYECTILES\r\n\r\nLos proyectiles son Cuerpos que siguen un movimiento parabólico, el movimiento está determinado por la Gravedad y la magnitud y dirección de la Fuerza Inicial. \r\n\r\nBalones de fútbol o pelotas de tenis podrían considerarse proyectiles, pero el término suele estar referido a armas. Flechas, dardos o lanzas son armas lanzadas usando la Fuerza mecánica aplicada por otro Objeto. Otras armas utilizan la Fuerza del aire comprimido para disparar. \r\n\r\nLa balística analiza la trayectoria del proyectil, las fuerzas que actúan Sobre el proyectil y el impacto que tiene el proyectil en el objetivo.', NULL, 'Modificar Gravedad y Fuerza inicial y registrar datos tales como máxima altura alcanzada, máxima distancia recorrida, tiempo de vuelo.', 'Alumno:\r\n\r\n¿Cuál es la diferencia de un tiro parabólico y un proyectil?\r\n\r\n¿Cuál es la diferencia del tiro vertical y un proyectil?\r\n\r\n¿Cómo influye la Elasticidad en los proyectiles?\r\n\r\n¿Cómo inlfuye la Fricción en los proyectiles?\r\n\r\n¿Cómo infuye el aplicar un Impulso o una Fuerza a un proyectil?'),
(23, 'proyectiles2', 'Proyectiles 2', 'PROYECTILES\r\n\r\nLos proyectiles son Cuerpos que siguen un movimiento parabólico, el movimiento está determinado por la Gravedad y la magnitud y dirección de la Fuerza Inicial. \r\n\r\nBalones de fútbol o pelotas de tenis podrían considerarse proyectiles, pero el término suele estar referido a armas. Flechas, dardos o lanzas son armas lanzadas usando la Fuerza mecánica aplicada por otro Objeto. Otras armas utilizan la Fuerza del aire comprimido para disparar. \r\n\r\nLa balística analiza la trayectoria del proyectil, las fuerzas que actúan Sobre el proyectil y el impacto que tiene el proyectil en el objetivo.', NULL, 'En esta práctica el cuerpo de estudio se localiza Sobre una plataforma y se le aplica un Impulso Inicial para que se combine con una caída libre.\r\n\r\nModificar Gravedad y Fuerza inicial y registrar datos tales como máxima altura alcanzada, máxima distancia recorrida, tiempo de vuelo.', NULL),
(24, 'tiroparabolico', 'Tiro Parabólico', 'TIRO PARABÓLICO\r\n\r\nSe denomina movimiento parabólico al realizado por un Objeto cuya trayectoria describe una parábola. Se corresponde con la trayectoria ideal de un proyectil que se mueve en un medio que no ofrece resistencia al avance y que está sujeto a un campo gravitatorio uniforme. También es posible demostrar que puede ser analizado como la composición de dos movimientos rectilíneos, un movimiento rectilíneo uniforme horizontal y movimiento rectilíneo uniformemente acelerado vertical.\r\n\r\nTipos de movimiento parabólico \r\n· El movimiento de media parábola o semiparabólico (lanzamiento horizontal): se puede considerar como la composición de un avance horizontal rectilíneo uniforme y la caída libre. \r\n· El movimiento parabólico completo: se puede considerar como la composición de un avance horizontal rectilíneo uniforme y un lanzamiento vertical hacia arriba, que es un movimiento rectilíneo uniformemente acelerado hacia abajo (MRUA) por la acción de la Gravedad. \r\n\r\nEn condiciones ideales de resistencia al avance nulo y campo gravitatorio uniforme, lo anterior implica que:\r\n1. Un cuerpo que se deja caer libremente y otro que es lanzado horizontalmente desde la misma altura tardan lo mismo en llegar al Suelo. \r\n2. La independencia de la Masa en la caída libre y el lanzamiento vertical es igual de válida en los movimientos parabólicos. \r\n3. Un cuerpo lanzado verticalmente hacia arriba y otro parabólicamente completo que alcance la misma altura tarda lo mismo en caer. \r\n\r\nEste movimiento está determinado por la Gravedad y la magnitud y dirección de la Fuerza Inicial. ', NULL, 'Masa\r\nLas propiedades iniciales de la práctica son:\r\n1. Se cuenta con una Esfera de ploma ubicada en las coordenadas\r\n	x=-2,  y=0.1    z=0.3\r\n2. Se le da un Velocidad x=4 (derecha), y=4 (hacia arriba)\r\n3. La Masa está en 18.85\r\n4. La Gravedad es de -9.81\r\n5. Graficar la posición de la Esfera en el eje ŽxŽ respecto al tiempo durante un segundo\r\n6. Cambiar el valor de la Masa por 3 y 30; repetir el ejercicio\r\n7. Graficar de diferente Color cada uno de los experimentos\r\n8. Anotar las conclusiones al cambiar la Masa\r\n\r\nFuerza inicial.\r\nEmpezar la práctica con los valores iniciales.\r\n1. Repetir el primer paso del punto anterior y obtener los datos tabulares desde la gráfica para los primeros 2 segundos \r\n2. Ir al botón de <propiedades iniciales> y cambiar la Velocidad y=2; y=6; x=2; x=6 (combinar los datos)\r\n3. Iniciar la práctica y graficarla.\r\n4. Sacar sus conclusiones\r\n\r\nFuerza de Gravedad\r\nReiniciar la práctica con los valores iniciales.\r\n1. Repetir el primer paso del punto anterior y obtener los datos tabulares desde la gráfica para los primeros 2 segundos \r\n2. Cambiar la Fuerza de Gravedad por la de Mercurio\r\n3. Graficar la posición de la Esfera y obtener los datos tabulares desde la gráfica \r\n4. Cambiar nuevamente la Fuerza de Gravedad por la de Júpiter\r\n5. Graficar la posición de la Esfera y obtener los datos tabulares desde la gráfica \r\n6. Inferir los resultados para Marte y Saturno\r\n7. Verificar al introducir los valores respectivos de su Gravedad.\n\nOBJETIVO\r\nAnalizar la influencia de la Fuerza inicial, la Masa y la Gravedad en un tiro parabólico', 'Alumno:\r\n\r\n¿Cuál es la influencia de la Masa en el tiro parabólico?\r\n\r\n\r\n¿Qué sucede cuando cambiamos la Gravedad?\r\n\r\n\r\n¿Cómo influye la Fuerza inicial?\r\n\r\n\r\n¿Qué pasará si combinamos un cambio de Gravedad positivo y un Impulso negativo en ŽyŽ?\r\n\r\n\r\n¿Qué sucede si agregamos una Fuerza inicial negativa en ŽxŽ?\r\n\r\n\r\n¿Cómo se comportaría una pelota de unicel o de aluminio?\r\n\r\n¿Cuál es la diferencia con el tiro vertical?'),
(25, 'tiroparabolicocolisi', 'Tiro Parabólico - Colisión', 'Se denomina movimiento parabólico al realizado por un Objeto cuya trayectoria describe una parábola. Se corresponde con la trayectoria ideal de un proyectil que se mueve en un medio que no ofrece resistencia al avance y que está sujeto a un campo gravitatorio uniforme. También es posible demostrar que puede ser analizado como la composición de dos movimientos rectilíneos, un movimiento rectilíneo uniforme horizontal y movimiento rectilíneo uniformemente acelerado vertical.\r\n\r\nSe le llama con colisión cuando dos Cuerpos (o más) tratan de ocupar el mismo espacio físico al mismo tiempo. Al no ser posible, se alteran ambas trayectorias dependiendo de su Velocidad, dirección y Masa al momento de la colisión', NULL, 'Se cuenta con dos esferas, una de ellas va en caída libre, mientras que la otra está en tiro parabólico. Las condiciones iniciales están dadas para que exista colisión. En esta primera etapa, se cambiarán los valores de la Esfera que realiza el tiro parabólico, mientras que la otra queda con los valores iniciales.\r\n\r\n1. Iniciar la práctica oprimiendo en el triángulo verde.\r\n2. Analizar la trayectoria de ambos Cuerpos.\r\n3. Cambiar el valor inicial en la posición x= -2 por x=-3.\r\n4. Repetir el experimento. \r\n5. Cambiar el valor inicial en la Velocidad en el eje x=4 por x=5.\r\n6. Correr la práctica y ver qué sucede.\r\n7. Encontrar el valor teórico que debe de tener ŽyŽ en la Velocidad inicial para que la colisión sea en el centro de las esferas.\r\n\r\nReiniciar la práctica con los valores iniciales. En esta ocasión se cambiarán los valores de la Esfera que va en caída libre\r\n\r\n1. Calcular a partir de qué valor en ŽyŽ (Velocidad) deja de haber colisión, cuando la Esfera del tiro parabólico pasa por debajo de la otra Esfera.\r\n2. Calcular a partir de qué valor en ŽyŽ (Velocidad) deja de haber colisión, cuando la Esfera del tiro parabólico pasa por encima de la otra Esfera.\r\n\nOBJETIVO\r\nAnalizar la influencia de la Fuerza inicial y ver las condiciones necesarias para que exista o no la colisión.', 'Alumno:\r\n\r\nCon los datos obtenidos, puede cambiar la posición inicial de la Esfera que va en tiro parabólico para que exista o no la colisión.\r\n\r\nAltere la Masa de la Esfera en caída libre por una de unicel, cambie u Masa y realice nuevamente la práctica.\r\n\r\n¿Cuál sería la consecuencia si repetimos la práctica alterando la Fuerza de Gravedad? \r\n\r\nRealice los experimentos con Fuerza de Gravedad de -1.21, que es la de la Luna.'),
(26, 'tirovertical', 'Tiro Vertical', 'TIRO VERTICAL\r\n\r\nLa altura máxima que alcanza un cuerpo lanzado hacia arriba está determinada por la Fuerza de Gravedad, la Masa del cuerpo y la Fuerza inicial.\r\nEl movimiento está sujeto a la aceleración gravitacional, solo que ahora es la aceleración la que se opone al movimiento inicial del Objeto. El tiro vertical comprende subida y bajada de los Cuerpos u objetos.\r\n \r\nCARACTERISTICAS:\r\nNunca la Velocidad inicial es cero. \r\nCuando el Objeto alcance su altura máxima su Velocidad en este punto es cero, mientras el Objeto está de subida el signo de la Velocidad es positivo y la Velocidad es cero en su altura máxima, cuando comienza el descenso el signo de la Velocidad es negativo. \r\nLa Velocidad de subida es igual a la de bajada pero el signo de la Velocidad al descender es negativo\r\n\r\nFORMULAS\r\n \r\nVf=Vo-gt\r\n    2        2\r\nVf= Vo-2gh\r\n                2\r\nh=Vot-1/2gt \r\n\r\n\r\nPROBLEMA\r\n\r\nSe lanza verticalmente hacia arriba una pelota con una Velocidad inicial de 30m/s. Calcula:\r\na)El tiempo que tarda en alcanzar su altura máxima.\r\nVf=Vo-gt                 t=0-30m/s/-9.81                     t=3.05s\r\n \r\nb) Su altura máxima:\r\nh=Vot-1/2gt(t)                                                         h=45.62m  \r\nh= 30m/s (3.05s)-1/2 9.81(3.05s)(3.05s)\r\n \r\nc) Velocidad de la pelota a los 2 s de haberse lanzado\r\nVf= 30m/s-9.81(2s)                                                Vf=10.38m/s\r\n \r\nd) Velocidad de la pelota a los 5s de haber sido lanzada\r\nVf=30m/s-9.80(5s)                                                 Vf=-19.05m/s\r\n \r\ne) Tiempo que estuvo la pelota en el aire.\r\nt=3.05+3.05                                                             t=6s\r\n', NULL, 'Masa\r\nLas propiedades iniciales de la práctica son:\r\n1. Se cuenta con una Esfera de ploma ubicada en las coordenadas\r\n	x=0,  y=0.1  z=0.3\r\n2. Se le da un Impulso en Y=8.20 (hacia arriba)\r\n3. La Masa está en 18.85\r\n4. La Gravedad es de -9.81 (Tierra),la cual se cambia en el botón de <<Mundo>>\r\n5. Graficar la posición de la Esfera en el eje ŽyŽ respecto al tiempo\r\n6. Cambiar el valor de la Masa por 3 y 30; repetir el ejercicio\r\n7. Graficar de diferente Color cada uno de los experimentos\r\n8. Anotar las conclusiones al cambiar la Masa\r\n\r\nFuerza de Gravedad\r\nEmpezar la práctica con los valores iniciales.\r\n1. Repetir el primer paso del punto anterior y obtener los datos tabulares desde la gráfica para los primeros 2 segundos \r\n2. Cambiar la Fuerza de Gravedad por la de Mercurio\r\n3. Graficar la posición de la Esfera y obtener los datos tabulares desde la gráfica \r\n4. Cambiar nuevamente la Fuerza de Gravedad por la de Júpiter\r\n5. Graficar la posición de la Esfera y obtener los datos tabulares desde la gráfica \r\n6. Inferir los resultados para Marte y Saturno\r\n7. Verificar al introducir los valores respectivos de su Gravedad.\r\n\r\nFuerza inicial.\r\nEmpezar la práctica con los valores iniciales.\r\n1. Repetir el primer paso del punto anterior y obtener los datos tabulares desde la gráfica para los primeros 2 segundos \r\n2. Ir al botón de <propiedades iniciales> y cambiar la Velocidad y=8.2 por y=4.1\r\n3. Iniciar la práctica y graficarla.\r\n4. Alterar nuevamente la Velocidad de y=16.4\r\n5. Iniciar la práctica y graficarla.\r\n6. Sacar sus conclusiones\r\n\r\nPuede combiar los 3 experimentos\n\nOBJETIVO\r\nAnalizar la influencia de la Fuerza inicial, la Masa y la Gravedad', 'Alumno:\n\r\n¿Cuál es la influencia de la Masa en el tiro vertical?\r\n\r\n¿Qué sucede cuando cambiamos la Gravedad?\r\n\r\n¿Cómo influye la Fuerza inicial?\r\n\r\n¿Qué pasará si combinamos un cambio de Gravedad positivo y un Impulso negativo en ŽyŽ?\r\n\r\n¿Qué sucede si agregamos una Fuerza inicial en ŽxŽ?\r\n\r\n¿Cómo se comportaría una pelota de unicel o de aluminio?');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `propertie`
--

DROP TABLE IF EXISTS `propertie`;
CREATE TABLE IF NOT EXISTS `propertie` (
  `propertie_id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `value` varchar(45) DEFAULT NULL,
  `description` varchar(200) DEFAULT NULL,
  `type` enum('World','Element') DEFAULT NULL,
  `editable` bit(1) DEFAULT NULL,
  `owner_id` int(11) NOT NULL,
  PRIMARY KEY (`propertie_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=827 ;

--
-- Volcar la base de datos para la tabla `propertie`
--

INSERT INTO `propertie` (`propertie_id`, `name`, `value`, `description`, `type`, `editable`, `owner_id`) VALUES
(1, 'gravity', '9.82', 'Gravedad del ambiente', 'World', b'1', 1),
(2, 'density', '2.00', 'Densidad del ambiente', 'World', b'1', 1),
(3, 'showAxes', 'false', 'Inidica si se mostraran los ejes', 'World', b'1', 1),
(4, 'showGround', 'false', 'Inidica si se mostrara el suelo', 'World', b'1', 1),
(5, 'position', '{ ''x'': 2, ''y'': 2 }', 'Ubicación de de la esfera en el eje cordenado, valores separados por coma.', 'Element', b'1', 1),
(7, 'mass', '4', 'Masa de la esfera del péndulo.', 'Element', b'1', 1),
(8, 'radio', '0.5', 'Radio para definir el tamaño de la esfera', 'Element', b'1', 1),
(9, 'elasticity', '0.4', 'Elasticidad de la esfera.', 'Element', b'1', 1),
(10, 'isSensor', 'false', 'No description needed', 'Element', b'0', 1),
(11, 'isStatic', 'false', 'No description needed', 'Element', b'0', 1),
(12, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 1),
(13, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 1),
(14, 'image', '{''resource'':''sphere''}', 'No description needed', 'Element', b'0', 1),
(15, 'radio', '4.0', 'Radio de distancia hacia el péndulo.', 'Element', b'1', 2),
(16, 'angle', '135', 'Ángulo de inclinación del péndulo, en grados.', 'Element', b'1', 2),
(17, 'isDrawable', 'false', 'No description needed', 'Element', b'0', 2),
(18, 'pointImage', '{''resource'':''point''}', 'No description needed', 'Element', b'0', 2),
(19, 'isStatic', 'true', 'No description needed', 'Element', b'0', 3),
(20, 'density', '1', 'No description needed', 'Element', b'0', 3),
(21, 'friction', '1', 'No description needed', 'Element', b'0', 3),
(22, 'elasticity', '1', 'No description needed', 'Element', b'0', 3),
(23, 'isSensor', 'false', 'No description needed', 'Element', b'0', 3),
(24, 'position', '{''x'': -7, ''y'': 8}', 'Posición de la polea', 'Element', b'1', 3),
(25, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 3),
(26, 'mass', '1', 'No description needed', 'Element', b'0', 3),
(27, 'radio', '0.2', 'No description needed', 'Element', b'0', 3),
(28, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 3),
(29, 'image', '{''resource'':''point''}', 'No description needed', 'Element', b'0', 3),
(30, 'isStatic', 'true', 'No description needed', 'Element', b'0', 4),
(31, 'density', '1', 'No description needed', 'Element', b'0', 4),
(32, 'friction', '1', 'No description needed', 'Element', b'0', 4),
(33, 'elasticity', '1', 'No description needed', 'Element', b'0', 4),
(34, 'isSensor', 'false', 'No description needed', 'Element', b'0', 4),
(35, 'position', '{''x'': 7, ''y'': 8}', 'Posición de la polea', 'Element', b'1', 4),
(36, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 4),
(37, 'mass', '1', 'No description needed', 'Element', b'0', 4),
(38, 'radio', '0.2', 'No description needed', 'Element', b'0', 4),
(39, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 4),
(40, 'image', '{''resource'':''point''}', 'No description needed', 'Element', b'0', 4),
(41, 'density', '0', 'No description needed', 'Element', b'0', 5),
(42, 'friction', '2', 'No description needed', 'Element', b'0', 5),
(43, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 5),
(44, 'isSensor', 'false', 'No description needed', 'Element', b'0', 5),
(45, 'position', '{''x'': -7, ''y'': 2}', 'Posición de la esfera', 'Element', b'1', 5),
(46, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 5),
(47, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 5),
(48, 'radio', '0.5', 'Radio de la esfera', 'Element', b'1', 5),
(49, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 5),
(50, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 5),
(51, 'density', '0', 'No description needed', 'Element', b'0', 6),
(52, 'friction', '2', 'No description needed', 'Element', b'0', 6),
(53, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 6),
(54, 'isSensor', 'false', 'No description needed', 'Element', b'0', 6),
(55, 'position', '{''x'': 0, ''y'': 2}', 'Posición de la esfera', 'Element', b'1', 6),
(56, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 6),
(57, 'mass', '2', 'Masa de la esfera', 'Element', b'1', 6),
(58, 'radio', '0.5', 'Radio de la esfera', 'Element', b'1', 6),
(59, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 6),
(60, 'image', '{''resource'':''sphere''}', 'No description needed', 'Element', b'0', 6),
(61, 'density', '0', 'No description needed', 'Element', b'0', 7),
(62, 'friction', '2', 'No description needed', 'Element', b'0', 7),
(63, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 7),
(64, 'isSensor', 'false', 'No description needed', 'Element', b'0', 7),
(65, 'position', '{''x'': 7, ''y'': 2}', 'Posición de la esfera', 'Element', b'1', 7),
(66, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 7),
(67, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 7),
(68, 'radio', '0.5', 'Radio de la esfera', 'Element', b'1', 7),
(69, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 7),
(70, 'image', '{''resource'':''sphere3''}', 'No description needed', 'Element', b'0', 7),
(71, 'gravity', '9.82', 'Gravedad del ambiente', 'World', b'1', 2),
(72, 'density', '0.0', 'Densidad del ambiente', 'World', b'1', 2),
(73, 'showAxes', 'false', 'Inidica si se mostraran los ejes', 'World', b'1', 2),
(74, 'showGround', 'false', 'Inidica si se mostrara el suelo', 'World', b'1', 2),
(75, 'gravity', '9.82', 'Gravedad del ambiente', 'World', b'1', 3),
(76, 'density', '0.0', 'Densidad del ambiente', 'World', b'1', 3),
(77, 'showAxes', 'false', 'Inidica si se mostraran los ejes', 'World', b'1', 3),
(78, 'showGround', 'true', 'Inidica si se mostrara el suelo', 'World', b'1', 3),
(79, 'value', '{''x'': 6, ''y'': -5}', 'Velocidad del movimiento', 'Element', b'1', 8),
(80, 'isDrawable', 'false', 'No description needed', 'Element', b'0', 8),
(81, 'density', '0', 'No description needed', 'Element', b'0', 9),
(82, 'friction', '2', 'Friccion de la esfera', 'Element', b'1', 9),
(83, 'elasticity', '0', 'Elasticidad de la esfera', 'Element', b'1', 9),
(84, 'isSensor', 'false', 'No description needed', 'Element', b'0', 9),
(85, 'position', '{''x'': -10, ''y'': 1}', 'Posición de la esfera', 'Element', b'1', 9),
(86, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 9),
(87, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 9),
(88, 'radio', '0.5', 'Radio de la esfera', 'Element', b'1', 9),
(89, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 9),
(90, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 9),
(91, 'isStatic', 'true', 'No description needed', 'Element', b'0', 10),
(92, 'density', '4', 'No description needed', 'Element', b'0', 10),
(93, 'friction', '3', 'No description needed', 'Element', b'0', 10),
(94, 'elasticity', '1', 'No description needed', 'Element', b'0', 10),
(95, 'isSensor', 'false', 'No description needed', 'Element', b'0', 10),
(96, 'position', '{''x'': 0, ''y'': 9}', 'No description needed', 'Element', b'0', 10),
(97, 'size', '{''width'': 4, ''height'': 1}', 'No description needed', 'Element', b'0', 10),
(98, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 10),
(99, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 10),
(100, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 10),
(101, 'density', '1', 'No description needed', 'Element', b'0', 11),
(102, 'friction', '2', 'No description needed', 'Element', b'0', 11),
(103, 'elasticity', '1', 'No description needed', 'Element', b'0', 11),
(104, 'isSensor', 'false', 'No description needed', 'Element', b'0', 11),
(105, 'position', '{''x'': 0, ''y'': 4.5}', 'No description needed', 'Element', b'0', 11),
(106, 'size', '{''width'': 0.7, ''height'': 3}', 'No description needed', 'Element', b'0', 11),
(107, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 11),
(108, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 11),
(109, 'image', '{''resource'':''upper_thread''}', 'No description needed', 'Element', b'0', 11),
(110, 'density', '1', 'No description needed', 'Element', b'0', 12),
(111, 'friction', '2', 'No description needed', 'Element', b'0', 12),
(112, 'mass', '1', 'No description needed', 'Element', b'0', 12),
(113, 'elasticity', '1', 'No description needed', 'Element', b'0', 12),
(114, 'isSensor', 'false', 'No description needed', 'Element', b'0', 12),
(115, 'position', '{''x'': 0, ''y'': 1}', 'No description needed', 'Element', b'0', 12),
(116, 'size', '{''width'': 7, ''height'': 0.5}', 'No description needed', 'Element', b'0', 12),
(117, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 12),
(118, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 12),
(119, 'image', '{''resource'':''ground''}', 'No description needed', 'Element', b'0', 12),
(120, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 13),
(121, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 13),
(122, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 13),
(123, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 13),
(124, 'isSensor', 'false', 'No description needed', 'Element', b'0', 13),
(125, 'position', '{''x'': -6, ''y'': -5}', 'No description needed', 'Element', b'0', 13),
(126, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 13),
(127, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 13),
(128, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 13),
(129, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 13),
(130, 'density', '1', 'Densidad de la esfera azul', 'Element', b'1', 14),
(131, 'friction', '2', 'Fricción de la esfera azul', 'Element', b'1', 14),
(132, 'mass', '1', 'Masa de la esfera azul', 'Element', b'1', 14),
(133, 'elasticity', '1', 'Elasticidad de la esfera azul', 'Element', b'1', 14),
(134, 'isSensor', 'false', 'No description needed', 'Element', b'0', 14),
(135, 'position', '{''x'': 6, ''y'': -5}', 'No description needed', 'Element', b'0', 14),
(136, 'radio', '0.5', 'Radio de la esfera azul', 'Element', b'1', 14),
(137, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 14),
(138, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 14),
(139, 'image', '{''resource'':''sphere3''}', 'No description needed', 'Element', b'0', 14),
(140, 'mass', '1', 'No description needed', 'Element', b'0', 11),
(141, 'isStatic', 'true', 'No description needed', 'Element', b'0', 15),
(142, 'density', '4', 'No description needed', 'Element', b'0', 15),
(143, 'friction', '3', 'No description needed', 'Element', b'0', 15),
(144, 'elasticity', '1', 'No description needed', 'Element', b'0', 15),
(145, 'isSensor', 'false', 'No description needed', 'Element', b'0', 15),
(146, 'position', '{''x'': 0, ''y'': 9}', 'No description needed', 'Element', b'0', 15),
(147, 'size', '{''width'': 4, ''height'': 1}', 'No description needed', 'Element', b'0', 15),
(148, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 15),
(149, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 15),
(150, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 15),
(151, 'density', '1', 'No description needed', 'Element', b'0', 16),
(152, 'friction', '2', 'No description needed', 'Element', b'0', 16),
(153, 'elasticity', '1', 'No description needed', 'Element', b'0', 16),
(154, 'isSensor', 'false', 'No description needed', 'Element', b'0', 16),
(155, 'position', '{''x'': 0, ''y'': 4.5}', 'No description needed', 'Element', b'0', 16),
(156, 'size', '{''width'': 0.7, ''height'': 3}', 'No description needed', 'Element', b'0', 16),
(157, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 16),
(158, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 16),
(159, 'image', '{''resource'':''upper_thread''}', 'No description needed', 'Element', b'0', 16),
(160, 'density', '1', 'No description needed', 'Element', b'0', 17),
(161, 'friction', '2', 'No description needed', 'Element', b'0', 17),
(162, 'mass', '1', 'No description needed', 'Element', b'0', 17),
(163, 'elasticity', '1', 'No description needed', 'Element', b'0', 17),
(164, 'isSensor', 'false', 'No description needed', 'Element', b'0', 17),
(165, 'position', '{''x'': 0, ''y'': 1}', 'No description needed', 'Element', b'0', 17),
(166, 'size', '{''width'': 7, ''height'': 0.5}', 'No description needed', 'Element', b'0', 17),
(167, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 17),
(168, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 17),
(169, 'image', '{''resource'':''ground''}', 'No description needed', 'Element', b'0', 17),
(170, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 18),
(171, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 18),
(172, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 18),
(173, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 18),
(174, 'isSensor', 'false', 'No description needed', 'Element', b'0', 18),
(175, 'position', '{''x'': -6, ''y'': -5}', 'No description needed', 'Element', b'0', 18),
(176, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 18),
(177, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 18),
(178, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 18),
(179, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 18),
(180, 'density', '1', 'Densidad de la esfera azul', 'Element', b'1', 19),
(181, 'friction', '2', 'Fricción de la esfera azul', 'Element', b'1', 19),
(182, 'mass', '1', 'Masa de la esfera azul', 'Element', b'1', 19),
(183, 'elasticity', '1', 'Elasticidad de la esfera azul', 'Element', b'1', 19),
(184, 'isSensor', 'false', 'No description needed', 'Element', b'0', 19),
(185, 'position', '{''x'': 6, ''y'': -3}', 'No description needed', 'Element', b'0', 19),
(186, 'radio', '0.5', 'Radio de la esfera azul', 'Element', b'1', 19),
(187, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 19),
(188, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 19),
(189, 'image', '{''resource'':''sphere3''}', 'No description needed', 'Element', b'0', 19),
(190, 'density', '4', 'No description needed', 'Element', b'1', 20),
(191, 'friction', '3', 'No description needed', 'Element', b'1', 20),
(192, 'elasticity', '0', 'No description needed', 'Element', b'1', 20),
(193, 'isSensor', 'false', 'No description needed', 'Element', b'0', 20),
(194, 'position', '{''x'': 2.5, ''y'': 8}', 'No description needed', 'Element', b'1', 20),
(195, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 20),
(196, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 20),
(197, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 20),
(198, 'mass', '1', 'No description needed', 'Element', b'1', 20),
(199, 'radio', '0.8', 'No description needed', 'Element', b'1', 20),
(200, 'density', '1', 'No description needed', 'Element', b'1', 21),
(201, 'friction', '4', 'No description needed', 'Element', b'1', 21),
(202, 'elasticity', '0.3', 'No description needed', 'Element', b'1', 21),
(203, 'isSensor', 'false', 'No description needed', 'Element', b'0', 21),
(204, 'position', '{''x'': 7, ''y'': 8}', 'No description needed', 'Element', b'1', 21),
(205, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 21),
(206, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 21),
(207, 'image', '{''resource'':''sphere''}', 'No description needed', 'Element', b'0', 21),
(208, 'mass', '1', 'No description needed', 'Element', b'1', 21),
(209, 'radio', '0.5', 'No description needed', 'Element', b'1', 21),
(210, 'density', '4', 'No description needed', 'Element', b'1', 22),
(211, 'friction', '5', 'No description needed', 'Element', b'1', 22),
(212, 'elasticity', '0.7', 'No description needed', 'Element', b'1', 22),
(213, 'isSensor', 'false', 'No description needed', 'Element', b'0', 22),
(214, 'position', '{''x'': -7, ''y'': 8}', 'No description needed', 'Element', b'1', 22),
(215, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 22),
(216, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 22),
(217, 'image', '{''resource'':''sphere3''}', 'No description needed', 'Element', b'0', 22),
(218, 'mass', '1', 'No description needed', 'Element', b'1', 22),
(219, 'radio', '1', 'No description needed', 'Element', b'1', 22),
(220, 'density', '1', 'No description needed', 'Element', b'1', 23),
(221, 'friction', '6', 'No description needed', 'Element', b'1', 23),
(222, 'elasticity', '0.9', 'No description needed', 'Element', b'1', 23),
(223, 'isSensor', 'false', 'No description needed', 'Element', b'0', 23),
(224, 'position', '{''x'': -2.3, ''y'': 8}', 'No description needed', 'Element', b'1', 23),
(225, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 23),
(226, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 23),
(227, 'image', '{''resource'':''sphere4''}', 'No description needed', 'Element', b'0', 23),
(228, 'mass', '1', 'No description needed', 'Element', b'1', 23),
(229, 'radio', '0.7', 'No description needed', 'Element', b'1', 23),
(230, 'isStatic', 'true', 'No description needed', 'Element', b'0', 25),
(231, 'density', '4', 'No description needed', 'Element', b'0', 25),
(232, 'friction', '3', 'No description needed', 'Element', b'0', 25),
(233, 'elasticity', '1', 'No description needed', 'Element', b'0', 25),
(234, 'isSensor', 'false', 'No description needed', 'Element', b'0', 25),
(235, 'position', '{''x'': -1.5, ''y'': 9}', 'No description needed', 'Element', b'0', 25),
(236, 'size', '{''width'': 4, ''height'': 1}', 'No description needed', 'Element', b'0', 25),
(237, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 25),
(238, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 25),
(239, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 25),
(240, 'density', '1', 'No description needed', 'Element', b'0', 26),
(241, 'friction', '2', 'No description needed', 'Element', b'0', 26),
(242, 'elasticity', '1', 'No description needed', 'Element', b'0', 26),
(243, 'isSensor', 'false', 'No description needed', 'Element', b'0', 26),
(244, 'position', '{''x'': -1.5, ''y'': 4.5}', 'No description needed', 'Element', b'0', 26),
(245, 'size', '{''width'': 0.7, ''height'': 3}', 'No description needed', 'Element', b'0', 26),
(246, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 26),
(247, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 26),
(248, 'image', '{''resource'':''upper_thread''}', 'No description needed', 'Element', b'0', 26),
(249, 'density', '1', 'No description needed', 'Element', b'0', 27),
(250, 'friction', '2', 'No description needed', 'Element', b'0', 27),
(251, 'mass', '1', 'No description needed', 'Element', b'0', 27),
(252, 'elasticity', '1', 'No description needed', 'Element', b'0', 27),
(253, 'isSensor', 'false', 'No description needed', 'Element', b'0', 27),
(254, 'position', '{''x'': 0, ''y'': 1}', 'No description needed', 'Element', b'0', 27),
(255, 'size', '{''width'': 7, ''height'': 0.5}', 'No description needed', 'Element', b'0', 27),
(256, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 27),
(257, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 27),
(258, 'image', '{''resource'':''ground''}', 'No description needed', 'Element', b'0', 27),
(259, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 28),
(260, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 28),
(261, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 28),
(262, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 28),
(263, 'isSensor', 'false', 'No description needed', 'Element', b'0', 28),
(264, 'position', '{''x'': -6, ''y'': -5}', 'No description needed', 'Element', b'0', 28),
(265, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 28),
(266, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 28),
(267, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 28),
(268, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 28),
(269, 'density', '1', 'Densidad de la esfera azul', 'Element', b'1', 29),
(270, 'friction', '2', 'Fricción de la esfera azul', 'Element', b'1', 29),
(271, 'mass', '1', 'Masa de la esfera azul', 'Element', b'1', 29),
(272, 'elasticity', '1', 'Elasticidad de la esfera azul', 'Element', b'1', 29),
(273, 'isSensor', 'false', 'No description needed', 'Element', b'0', 29),
(274, 'position', '{''x'': 6, ''y'': -5}', 'No description needed', 'Element', b'0', 29),
(275, 'radio', '0.5', 'Radio de la esfera azul', 'Element', b'1', 29),
(276, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 29),
(277, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 29),
(278, 'image', '{''resource'':''sphere3''}', 'No description needed', 'Element', b'0', 29),
(279, 'isStatic', 'true', 'No description needed', 'Element', b'0', 30),
(280, 'density', '4', 'No description needed', 'Element', b'0', 30),
(281, 'friction', '3', 'No description needed', 'Element', b'0', 30),
(282, 'elasticity', '1', 'No description needed', 'Element', b'0', 30),
(283, 'isSensor', 'false', 'No description needed', 'Element', b'0', 30),
(284, 'position', '{''x'': -1.5, ''y'': 9}', 'No description needed', 'Element', b'0', 30),
(285, 'size', '{''width'': 4, ''height'': 1}', 'No description needed', 'Element', b'0', 30),
(286, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 30),
(287, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 30),
(288, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 30),
(289, 'density', '1', 'No description needed', 'Element', b'0', 31),
(290, 'friction', '2', 'No description needed', 'Element', b'0', 31),
(291, 'elasticity', '1', 'No description needed', 'Element', b'0', 31),
(292, 'isSensor', 'false', 'No description needed', 'Element', b'0', 31),
(293, 'position', '{''x'': -1.5, ''y'': 4.5}', 'No description needed', 'Element', b'0', 31),
(294, 'size', '{''width'': 0.7, ''height'': 3}', 'No description needed', 'Element', b'0', 31),
(295, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 31),
(296, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 31),
(297, 'image', '{''resource'':''upper_thread''}', 'No description needed', 'Element', b'0', 31),
(298, 'density', '1', 'No description needed', 'Element', b'0', 32),
(299, 'friction', '2', 'No description needed', 'Element', b'0', 32),
(300, 'mass', '1', 'No description needed', 'Element', b'0', 32),
(301, 'elasticity', '1', 'No description needed', 'Element', b'0', 32),
(302, 'isSensor', 'false', 'No description needed', 'Element', b'0', 32),
(303, 'position', '{''x'': 0, ''y'': 1}', 'No description needed', 'Element', b'0', 32),
(304, 'size', '{''width'': 7, ''height'': 0.5}', 'No description needed', 'Element', b'0', 32),
(305, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 32),
(306, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 32),
(307, 'image', '{''resource'':''ground''}', 'No description needed', 'Element', b'0', 32),
(308, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 33),
(309, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 33),
(310, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 33),
(311, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 33),
(312, 'isSensor', 'false', 'No description needed', 'Element', b'0', 33),
(313, 'position', '{''x'': -6, ''y'': -3}', 'No description needed', 'Element', b'0', 33),
(314, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 33),
(315, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 33),
(316, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 33),
(317, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 33),
(318, 'density', '1', 'Densidad de la esfera azul', 'Element', b'1', 34),
(319, 'friction', '2', 'Fricción de la esfera azul', 'Element', b'1', 34),
(320, 'mass', '1', 'Masa de la esfera azul', 'Element', b'1', 34),
(321, 'elasticity', '1', 'Elasticidad de la esfera azul', 'Element', b'1', 34),
(322, 'isSensor', 'false', 'No description needed', 'Element', b'0', 34),
(323, 'position', '{''x'': 6, ''y'': -5}', 'No description needed', 'Element', b'0', 34),
(324, 'radio', '0.5', 'Radio de la esfera azul', 'Element', b'1', 34),
(325, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 34),
(326, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 34),
(327, 'image', '{''resource'':''sphere3''}', 'No description needed', 'Element', b'0', 34),
(328, 'isStatic', 'true', 'No description needed', 'Element', b'0', 35),
(329, 'density', '4', 'No description needed', 'Element', b'0', 35),
(330, 'friction', '3', 'No description needed', 'Element', b'0', 35),
(331, 'elasticity', '1', 'No description needed', 'Element', b'0', 35),
(332, 'isSensor', 'false', 'No description needed', 'Element', b'0', 35),
(333, 'position', '{''x'': 1.5, ''y'': -3.3}', 'No description needed', 'Element', b'0', 35),
(334, 'size', '{''width'': 11, ''height'': 0.5}', 'No description needed', 'Element', b'0', 35),
(335, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 35),
(336, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 35),
(338, 'isStatic', 'true', 'estatic', 'Element', b'1', 36),
(339, 'density', '4', 'Densidad de la polea', 'Element', b'1', 36),
(340, 'friction', '2', 'Fricción de la polea', 'Element', b'1', 36),
(341, 'mass', '1', 'Masa de la polea', 'Element', b'1', 36),
(342, 'elasticity', '1', 'Elasticidad de la polea', 'Element', b'1', 36),
(343, 'isSensor', 'false', 'No description needed', 'Element', b'0', 36),
(344, 'position', '{''x'': -6, ''y'': 5}', 'No description needed', 'Element', b'0', 36),
(345, 'radio', '0.5', 'Radio de la esfera amarilla', 'Element', b'1', 36),
(346, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 36),
(347, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 36),
(348, 'image', '{''resource'':''point''}', 'No description needed', 'Element', b'0', 36),
(349, 'density', '4', 'Densidad de la esfera amarilla', 'Element', b'1', 37),
(350, 'friction', '2', 'Fricción de la esfera amarilla', 'Element', b'1', 37),
(351, 'mass', '1', 'Masa de la esfera amarilla', 'Element', b'1', 37),
(352, 'elasticity', '1', 'Elasticidad de la esfera amarilla', 'Element', b'1', 37),
(353, 'isSensor', 'false', 'No description needed', 'Element', b'0', 37),
(354, 'position', '{''x'': -6, ''y'': -3}', 'No description needed', 'Element', b'0', 37),
(355, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 37),
(356, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 37),
(357, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 37),
(358, 'image', '{''resource'':''sphere''}', 'No description needed', 'Element', b'0', 37),
(359, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 38),
(360, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 38),
(361, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 38),
(362, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 38),
(363, 'isSensor', 'false', 'No description needed', 'Element', b'0', 38),
(364, 'position', '{''x'': 6, ''y'': -5}', 'No description needed', 'Element', b'0', 38),
(365, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 38),
(366, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 38),
(367, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 38),
(368, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 38),
(379, 'isStatic', 'true', 'No description needed', 'Element', b'0', 39),
(380, 'density', '4', 'No description needed', 'Element', b'0', 39),
(381, 'friction', '3', 'No description needed', 'Element', b'0', 39),
(382, 'elasticity', '1', 'No description needed', 'Element', b'0', 39),
(383, 'isSensor', 'false', 'No description needed', 'Element', b'0', 39),
(384, 'position', '{''x'': 1.5, ''y'': -4.3}', 'No description needed', 'Element', b'0', 39),
(385, 'size', '{''width'': 10, ''height'': 0.5}', 'No description needed', 'Element', b'0', 39),
(386, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 39),
(387, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 39),
(389, 'isStatic', 'true', 'estatic', 'Element', b'1', 40),
(390, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 40),
(391, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 40),
(392, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 40),
(393, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 40),
(394, 'isSensor', 'false', 'No description needed', 'Element', b'0', 40),
(395, 'position', '{''x'': -6, ''y'': 1.8}', 'No description needed', 'Element', b'0', 40),
(396, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 40),
(397, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 40),
(398, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 40),
(399, 'image', '{''resource'':''point''}', 'No description needed', 'Element', b'0', 40),
(400, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 41),
(401, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 41),
(402, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 41),
(403, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 41),
(404, 'isSensor', 'false', 'No description needed', 'Element', b'0', 41),
(405, 'position', '{''x'': -6, ''y'': -3}', 'No description needed', 'Element', b'0', 41),
(406, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 41),
(407, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 41),
(408, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 41),
(409, 'image', '{''resource'':''sphere''}', 'No description needed', 'Element', b'0', 41),
(420, 'density', '1', 'Densidad de la esfera azul', 'Element', b'1', 42),
(421, 'friction', '2', 'Fricción de la esfera azul', 'Element', b'1', 42),
(422, 'mass', '1', 'Masa de la esfera azul', 'Element', b'1', 42),
(423, 'elasticity', '1', 'Elasticidad de la esfera azul', 'Element', b'1', 42),
(424, 'isSensor', 'false', 'No description needed', 'Element', b'0', 42),
(425, 'position', '{''x'': 6, ''y'': -5}', 'No description needed', 'Element', b'0', 42),
(426, 'radio', '0.5', 'Radio de la esfera azul', 'Element', b'1', 42),
(427, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 42),
(428, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 42),
(429, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 42),
(430, 'isStatic', 'true', 'No description needed', 'Element', b'0', 43),
(431, 'density', '4', 'No description needed', 'Element', b'0', 43),
(432, 'friction', '3', 'No description needed', 'Element', b'0', 43),
(433, 'elasticity', '1', 'No description needed', 'Element', b'0', 43),
(434, 'isSensor', 'false', 'No description needed', 'Element', b'0', 43),
(435, 'position', '{''x'': 2, ''y'': -4.7}', 'No description needed', 'Element', b'0', 43),
(436, 'size', '{''width'': 7, ''height'': 0.5}', 'No description needed', 'Element', b'0', 43),
(437, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 43),
(438, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 43),
(440, 'isStatic', 'true', 'estatic', 'Element', b'1', 44),
(441, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 44),
(442, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 44),
(443, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 44),
(444, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 44),
(445, 'isSensor', 'false', 'No description needed', 'Element', b'0', 44),
(446, 'position', '{''x'': -6, ''y'': 1.8}', 'No description needed', 'Element', b'0', 44),
(447, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 44),
(448, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 44),
(449, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 44),
(450, 'image', '{''resource'':''point''}', 'No description needed', 'Element', b'0', 44),
(451, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 45),
(452, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 45),
(453, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 45),
(454, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 45),
(455, 'isSensor', 'false', 'No description needed', 'Element', b'0', 45),
(456, 'position', '{''x'': -6, ''y'': -3}', 'No description needed', 'Element', b'0', 45),
(457, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 45),
(458, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 45),
(459, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 45),
(460, 'image', '{''resource'':''sphere''}', 'No description needed', 'Element', b'0', 45),
(461, 'density', '4', 'Densidad de la esfera azul', 'Element', b'1', 46),
(462, 'friction', '2', 'Fricción de la esfera azul', 'Element', b'1', 46),
(463, 'mass', '1', 'Masa de la esfera azul', 'Element', b'1', 46),
(464, 'elasticity', '1', 'Elasticidad de la esfera azul', 'Element', b'1', 46),
(465, 'isSensor', 'false', 'No description needed', 'Element', b'0', 46),
(466, 'position', '{''x'': 8, ''y'': -5}', 'No description needed', 'Element', b'0', 46),
(467, 'radio', '0.5', 'Radio de la esfera azul', 'Element', b'1', 46),
(468, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 46),
(469, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 46),
(470, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 46),
(471, 'isStatic', 'true', 'No description needed', 'Element', b'0', 47),
(472, 'density', '4', 'No description needed', 'Element', b'0', 47),
(473, 'friction', '3', 'No description needed', 'Element', b'0', 47),
(474, 'elasticity', '1', 'No description needed', 'Element', b'0', 47),
(475, 'isSensor', 'false', 'No description needed', 'Element', b'0', 47),
(476, 'position', '{''x'': -1.5, ''y'': 9}', 'No description needed', 'Element', b'0', 47),
(477, 'size', '{''width'': 4, ''height'': 1}', 'No description needed', 'Element', b'0', 47),
(478, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 47),
(479, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 47),
(480, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 47),
(481, 'density', '1', 'No description needed', 'Element', b'0', 48),
(482, 'friction', '2', 'No description needed', 'Element', b'0', 48),
(483, 'elasticity', '1', 'No description needed', 'Element', b'0', 48),
(484, 'isSensor', 'false', 'No description needed', 'Element', b'0', 48),
(485, 'position', '{''x'': -1.5, ''y'': 4.5}', 'No description needed', 'Element', b'0', 48),
(486, 'size', '{''width'': 0.6, ''height'': 3}', 'No description needed', 'Element', b'0', 48),
(487, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 48),
(488, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 48),
(489, 'image', '{''resource'':''upper_thread''}', 'No description needed', 'Element', b'0', 48),
(490, 'density', '1', 'No description needed', 'Element', b'0', 49),
(491, 'friction', '2', 'No description needed', 'Element', b'0', 49),
(492, 'mass', '1', 'No description needed', 'Element', b'0', 49),
(493, 'elasticity', '1', 'No description needed', 'Element', b'0', 49),
(494, 'isSensor', 'false', 'No description needed', 'Element', b'0', 49),
(495, 'position', '{''x'': 0, ''y'': 1}', 'No description needed', 'Element', b'0', 49),
(496, 'size', '{''width'': 7, ''height'': 0.5}', 'No description needed', 'Element', b'0', 49),
(497, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 49),
(498, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 49),
(499, 'image', '{''resource'':''ground''}', 'No description needed', 'Element', b'0', 49),
(500, 'density', '1', 'Densidad de la esfera naranja', 'Element', b'1', 50),
(501, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 50),
(502, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 50),
(503, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 50),
(504, 'isSensor', 'false', 'No description needed', 'Element', b'0', 50),
(505, 'position', '{''x'': -6, ''y'': -5}', 'No description needed', 'Element', b'0', 50),
(506, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 50),
(507, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 50),
(508, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 50),
(509, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 50),
(510, 'density', '4', 'Densidad de la esfera azul', 'Element', b'1', 51),
(511, 'friction', '2', 'Fricción de la esfera azul', 'Element', b'1', 51),
(512, 'mass', '1', 'Masa de la esfera azul', 'Element', b'1', 51),
(513, 'elasticity', '1', 'Elasticidad de la esfera azul', 'Element', b'1', 51),
(514, 'isSensor', 'false', 'No description needed', 'Element', b'0', 51),
(515, 'position', '{''x'': 6, ''y'': -3}', 'No description needed', 'Element', b'0', 51),
(516, 'radio', '0.5', 'Radio de la esfera azul', 'Element', b'1', 51),
(517, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 51),
(518, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 51),
(519, 'image', '{''resource'':''sphere3''}', 'No description needed', 'Element', b'0', 51),
(520, 'isStatic', 'true', 'No description needed', 'Element', b'0', 52),
(521, 'density', '4', 'No description needed', 'Element', b'0', 52),
(522, 'friction', '3', 'No description needed', 'Element', b'0', 52),
(523, 'elasticity', '1', 'No description needed', 'Element', b'0', 52),
(524, 'isSensor', 'false', 'No description needed', 'Element', b'0', 52),
(525, 'position', '{''x'': -1.5, ''y'': 9}', 'No description needed', 'Element', b'0', 52),
(526, 'size', '{''width'': 4, ''height'': 1}', 'No description needed', 'Element', b'0', 52),
(527, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 52),
(528, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 52),
(529, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 52),
(530, 'density', '1', 'No description needed', 'Element', b'0', 53),
(531, 'friction', '2', 'No description needed', 'Element', b'0', 53),
(532, 'elasticity', '1', 'No description needed', 'Element', b'0', 53),
(533, 'isSensor', 'false', 'No description needed', 'Element', b'0', 53),
(534, 'position', '{''x'': -1.5, ''y'': 4.5}', 'No description needed', 'Element', b'0', 53),
(535, 'size', '{''width'': 0.6, ''height'': 3}', 'No description needed', 'Element', b'0', 53),
(536, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 53),
(537, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 53),
(538, 'image', '{''resource'':''upper_thread''}', 'No description needed', 'Element', b'0', 53),
(539, 'density', '4', 'No description needed', 'Element', b'0', 54),
(540, 'friction', '2', 'No description needed', 'Element', b'0', 54),
(541, 'mass', '1', 'No description needed', 'Element', b'0', 54),
(542, 'elasticity', '1', 'No description needed', 'Element', b'0', 54),
(543, 'isSensor', 'false', 'No description needed', 'Element', b'0', 54),
(544, 'position', '{''x'': 0, ''y'': 1}', 'No description needed', 'Element', b'0', 54),
(545, 'size', '{''width'': 7, ''height'': 0.5}', 'No description needed', 'Element', b'0', 54),
(546, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 54),
(547, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 54),
(548, 'image', '{''resource'':''ground''}', 'No description needed', 'Element', b'0', 54),
(549, 'density', '1', 'Densidad de la esfera naranja', 'Element', b'1', 55),
(550, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 55),
(551, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 55),
(552, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 55),
(553, 'isSensor', 'false', 'No description needed', 'Element', b'0', 55),
(554, 'position', '{''x'': -6, ''y'': -5}', 'No description needed', 'Element', b'0', 55),
(555, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 55),
(556, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 55),
(557, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 55),
(558, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 55),
(559, 'density', '1', 'Densidad de la esfera azul', 'Element', b'1', 56),
(560, 'friction', '2', 'Fricción de la esfera azul', 'Element', b'1', 56),
(561, 'mass', '1', 'Masa de la esfera azul', 'Element', b'1', 56),
(562, 'elasticity', '1', 'Elasticidad de la esfera azul', 'Element', b'1', 56),
(563, 'isSensor', 'false', 'No description needed', 'Element', b'0', 56),
(564, 'position', '{''x'': 6, ''y'': -5}', 'No description needed', 'Element', b'0', 56),
(565, 'radio', '1', 'Radio de la esfera azul', 'Element', b'1', 56),
(566, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 56),
(567, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 56),
(568, 'image', '{''resource'':''sphere3''}', 'No description needed', 'Element', b'0', 56),
(569, 'isStatic', 'true', 'No description needed', 'Element', b'0', 57),
(570, 'density', '4', 'No description needed', 'Element', b'0', 57),
(571, 'friction', '3', 'No description needed', 'Element', b'0', 57),
(572, 'elasticity', '1', 'No description needed', 'Element', b'0', 57),
(573, 'isSensor', 'false', 'No description needed', 'Element', b'0', 57),
(574, 'position', '{''x'': -1.5, ''y'': 9}', 'No description needed', 'Element', b'0', 57),
(575, 'size', '{''width'': 4, ''height'': 1}', 'No description needed', 'Element', b'0', 57),
(576, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 57),
(577, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 57),
(578, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 57),
(579, 'density', '1', 'No description needed', 'Element', b'0', 58),
(580, 'friction', '2', 'No description needed', 'Element', b'0', 58),
(581, 'elasticity', '1', 'No description needed', 'Element', b'0', 58),
(582, 'isSensor', 'false', 'No description needed', 'Element', b'0', 58),
(583, 'position', '{''x'': -1.5, ''y'': 4.5}', 'No description needed', 'Element', b'0', 58),
(584, 'size', '{''width'': 0.7, ''height'': 3}', 'No description needed', 'Element', b'0', 58),
(585, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 58),
(586, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 58),
(587, 'image', '{''resource'':''upper_thread''}', 'No description needed', 'Element', b'0', 58),
(588, 'density', '4', 'No description needed', 'Element', b'0', 59),
(589, 'friction', '2', 'No description needed', 'Element', b'0', 59),
(590, 'mass', '1', 'No description needed', 'Element', b'0', 59),
(591, 'elasticity', '1', 'No description needed', 'Element', b'0', 59),
(592, 'isSensor', 'false', 'No description needed', 'Element', b'0', 59),
(593, 'position', '{''x'': 0, ''y'': 1}', 'No description needed', 'Element', b'0', 59),
(594, 'size', '{''width'': 7, ''height'': 0.5}', 'No description needed', 'Element', b'0', 59),
(595, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 59),
(596, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 59),
(597, 'image', '{''resource'':''ground''}', 'No description needed', 'Element', b'0', 59),
(598, 'density', '1', 'Densidad de la esfera naranja', 'Element', b'1', 60),
(599, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 60),
(600, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 60),
(601, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 60),
(602, 'isSensor', 'false', 'No description needed', 'Element', b'0', 60),
(603, 'position', '{''x'': -6, ''y'': -5}', 'No description needed', 'Element', b'0', 60),
(604, 'radio', '1', 'Radio de la esfera naranja', 'Element', b'1', 60),
(605, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 60),
(606, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 60),
(607, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 60),
(608, 'density', '1', 'Densidad de la esfera azul', 'Element', b'1', 61),
(609, 'friction', '2', 'Fricción de la esfera azul', 'Element', b'1', 61),
(610, 'mass', '1', 'Masa de la esfera azul', 'Element', b'1', 61),
(611, 'elasticity', '1', 'Elasticidad de la esfera azul', 'Element', b'1', 61),
(612, 'isSensor', 'false', 'No description needed', 'Element', b'0', 61),
(613, 'position', '{''x'': 6, ''y'': -5}', 'No description needed', 'Element', b'0', 61),
(614, 'radio', '0.5', 'Radio de la esfera azul', 'Element', b'1', 61),
(615, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 61),
(616, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 61),
(617, 'image', '{''resource'':''sphere3''}', 'No description needed', 'Element', b'0', 61),
(618, 'gravity', '9.82', 'Gravedad del ambiente', 'World', b'1', 15),
(619, 'density', '0.0', 'Densidad del ambiente', 'World', b'1', 15),
(620, 'showAxes', 'false', 'Inidica si se mostraran los ejes', 'World', b'1', 15),
(621, 'showGround', 'true', 'Inidica si se mostrara el suelo', 'World', b'1', 15),
(622, 'value', '{''x'': 6, ''y'': -5}', 'Velocidad del movimiento', 'Element', b'1', 64),
(623, 'isDrawable', 'false', 'No description needed', 'Element', b'0', 64),
(624, 'value', '{''x'': -6, ''y'': -5}', 'Velocidad del movimiento', 'Element', b'1', 65),
(625, 'isDrawable', 'false', 'No description needed', 'Element', b'0', 65),
(626, 'density', '0', 'No description needed', 'Element', b'0', 62),
(627, 'friction', '2', 'No description needed', 'Element', b'0', 62),
(628, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 62),
(629, 'isSensor', 'false', 'No description needed', 'Element', b'0', 62),
(630, 'position', '{''x'': -10, ''y'': 1}', 'Posición de la esfera', 'Element', b'1', 62),
(631, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 62),
(632, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 62),
(633, 'radio', '0.5', 'Radio de la esfera', 'Element', b'1', 62),
(634, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 62),
(635, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 62),
(636, 'density', '0', 'No description needed', 'Element', b'0', 63),
(637, 'friction', '2', 'No description needed', 'Element', b'0', 63),
(638, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 63),
(639, 'isSensor', 'false', 'No description needed', 'Element', b'0', 63),
(640, 'position', '{''x'': 10, ''y'': 1}', 'Posición de la esfera', 'Element', b'1', 63),
(641, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 63),
(642, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 63),
(643, 'radio', '0.5', 'Radio de la esfera', 'Element', b'1', 63),
(644, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 63),
(645, 'image', '{''resource'':''sphere3''}', 'No description needed', 'Element', b'0', 63),
(646, 'isStatic', 'true', 'No description needed', 'Element', b'0', 66),
(647, 'density', '4', 'No description needed', 'Element', b'0', 66),
(648, 'friction', '1', 'No description needed', 'Element', b'0', 66),
(649, 'elasticity', '0', 'Elasticidad de la esfera', 'Element', b'1', 66),
(650, 'isSensor', 'false', 'No description needed', 'Element', b'0', 66),
(651, 'position', '{''x'': 0, ''y'': -5}', 'Posición de la esfera', 'Element', b'1', 66),
(652, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 66),
(653, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 66),
(654, 'size', '{''width'': 10, ''height'': 0.5}', 'Radio de la esfera', 'Element', b'1', 66),
(655, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 66),
(656, 'image', '{''resource'':''ground''}', 'No description needed', 'Element', b'0', 66),
(657, 'density', '4', 'No description needed', 'Element', b'0', 67),
(658, 'friction', '1', 'No description needed', 'Element', b'0', 67),
(659, 'elasticity', '0.5', 'Elasticidad de la esfera', 'Element', b'1', 67),
(660, 'isSensor', 'false', 'No description needed', 'Element', b'0', 67),
(661, 'position', '{''x'': 7, ''y'': -3.4}', 'Posición de la esfera', 'Element', b'1', 67),
(662, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 67),
(663, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 67),
(664, 'size', '{''width'': 2, ''height'': 1}', 'Radio de la esfera', 'Element', b'1', 67),
(665, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 67),
(666, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 67),
(667, 'value', '{''x'': -3, ''y'': 1}', 'Velocidad del movimiento', 'Element', b'1', 68),
(668, 'isDrawable', 'false', 'No description needed', 'Element', b'0', 68),
(669, 'isStatic', 'true', 'No description needed', 'Element', b'0', 69),
(670, 'density', '4', 'No description needed', 'Element', b'0', 69),
(671, 'friction', '1', 'No description needed', 'Element', b'0', 69),
(672, 'elasticity', '0', 'Elasticidad de la esfera', 'Element', b'1', 69),
(673, 'isSensor', 'false', 'No description needed', 'Element', b'0', 69),
(674, 'position', '{''x'': 0, ''y'': -5}', 'Posición de la esfera', 'Element', b'1', 69),
(675, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 69),
(676, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 69),
(677, 'size', '{''width'': 10, ''height'': 0.5}', 'Radio de la esfera', 'Element', b'1', 69),
(678, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 69);
INSERT INTO `propertie` (`propertie_id`, `name`, `value`, `description`, `type`, `editable`, `owner_id`) VALUES
(679, 'image', '{''resource'':''ground''}', 'No description needed', 'Element', b'0', 69),
(680, 'density', '4', 'No description needed', 'Element', b'0', 70),
(681, 'friction', '1', 'No description needed', 'Element', b'0', 70),
(682, 'elasticity', '0.5', 'Elasticidad de la esfera', 'Element', b'1', 70),
(683, 'isSensor', 'false', 'No description needed', 'Element', b'0', 70),
(684, 'position', '{''x'': 7, ''y'': -3.4}', 'Posición de la esfera', 'Element', b'1', 70),
(685, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 70),
(686, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 70),
(687, 'size', '{''width'': 1, ''height'': 1}', 'Radio de la esfera', 'Element', b'1', 70),
(688, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 70),
(689, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 70),
(690, 'value', '{''x'': -3, ''y'': 1}', 'Velocidad del movimiento', 'Element', b'1', 71),
(691, 'isDrawable', 'false', 'No description needed', 'Element', b'0', 71),
(692, 'isStatic', 'true', 'No description needed', 'Element', b'0', 72),
(693, 'density', '4', 'No description needed', 'Element', b'0', 72),
(694, 'friction', '3', 'No description needed', 'Element', b'0', 72),
(695, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 72),
(696, 'isSensor', 'false', 'No description needed', 'Element', b'0', 72),
(697, 'position', '{''x'': -4, ''y'': 0}', 'Posición de la esfera', 'Element', b'1', 72),
(698, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 72),
(699, 'size', '{''width'': 4, ''height'': 1}', 'Radio de la esfera', 'Element', b'1', 72),
(700, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 72),
(701, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 72),
(702, 'density', '0', 'No description needed', 'Element', b'0', 73),
(703, 'friction', '2', 'No description needed', 'Element', b'0', 73),
(704, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 73),
(705, 'isSensor', 'false', 'No description needed', 'Element', b'0', 73),
(706, 'position', '{''x'': 5, ''y'': -5}', 'Posición de la esfera', 'Element', b'1', 73),
(707, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 73),
(708, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 73),
(709, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 73),
(710, 'image', '{''resource'':''sphere2''}', 'No description needed', 'Element', b'0', 73),
(711, 'radio', '0.5', 'Radio de la esfera', 'Element', b'1', 73),
(712, 'isStatic', 'true', 'estatic', 'Element', b'1', 74),
(713, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 74),
(714, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 74),
(715, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 74),
(716, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 74),
(717, 'isSensor', 'false', 'No description needed', 'Element', b'0', 74),
(718, 'position', '{''x'': 5, ''y'': 5}', 'No description needed', 'Element', b'0', 74),
(719, 'radio', '0.5', 'Radio de la esfera naranja', 'Element', b'1', 74),
(720, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 74),
(721, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 74),
(722, 'image', '{''resource'':''point''}', 'No description needed', 'Element', b'0', 74),
(723, 'isStatic', 'true', 'No description needed', 'Element', b'0', 75),
(724, 'density', '4', 'No description needed', 'Element', b'0', 75),
(725, 'friction', '3', 'No description needed', 'Element', b'0', 75),
(726, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 75),
(727, 'isSensor', 'false', 'No description needed', 'Element', b'0', 75),
(728, 'position', '{''x'': -10.5, ''y'': 6}', 'Posición de la esfera', 'Element', b'1', 75),
(729, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 75),
(730, 'size', '{''width'': 4, ''height'': 1}', 'Radio de la esfera', 'Element', b'1', 75),
(731, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 75),
(732, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 75),
(733, 'isStatic', 'true', 'No description needed', 'Element', b'0', 76),
(734, 'density', '4', 'No description needed', 'Element', b'0', 76),
(735, 'friction', '3', 'No description needed', 'Element', b'0', 76),
(736, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 76),
(737, 'isSensor', 'false', 'No description needed', 'Element', b'0', 76),
(738, 'position', '{''x'': 10.5, ''y'': 6}', 'Posición de la esfera', 'Element', b'1', 76),
(739, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 76),
(740, 'size', '{''width'': 4, ''height'': 1}', 'Radio de la esfera', 'Element', b'1', 76),
(741, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 76),
(742, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 76),
(743, 'density', '0', 'No description needed', 'Element', b'0', 77),
(744, 'friction', '2', 'No description needed', 'Element', b'0', 77),
(745, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 77),
(746, 'isSensor', 'false', 'No description needed', 'Element', b'0', 77),
(747, 'position', '{''x'': 0, ''y'': -5}', 'Posición de la esfera', 'Element', b'1', 77),
(748, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 77),
(749, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 77),
(750, 'radio', '0.5', 'Radio de la esfera', 'Element', b'1', 77),
(751, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 77),
(752, 'image', '{''resource'':''sphere''}', 'No description needed', 'Element', b'0', 77),
(753, 'isStatic', 'true', 'estatic', 'Element', b'1', 78),
(754, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 78),
(755, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 78),
(756, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 78),
(757, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 78),
(758, 'isSensor', 'false', 'No description needed', 'Element', b'0', 78),
(759, 'position', '{''x'': 4.5, ''y'': 5.9}', 'No description needed', 'Element', b'0', 78),
(760, 'radio', '0.4', 'Radio de la esfera naranja', 'Element', b'1', 78),
(761, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 78),
(762, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 78),
(763, 'image', '{''resource'':''point''}', 'No description needed', 'Element', b'0', 78),
(764, 'isStatic', 'true', 'estatic', 'Element', b'1', 79),
(765, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 79),
(766, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 79),
(767, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 79),
(768, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 79),
(769, 'isSensor', 'false', 'No description needed', 'Element', b'0', 79),
(770, 'position', '{''x'': -4.5, ''y'': 5.9}', 'No description needed', 'Element', b'0', 79),
(771, 'radio', '0.4', 'Radio de la esfera naranja', 'Element', b'1', 79),
(772, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 79),
(773, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 79),
(774, 'image', '{''resource'':''point''}', 'No description needed', 'Element', b'0', 79),
(775, 'isStatic', 'true', 'No description needed', 'Element', b'0', 80),
(776, 'density', '4', 'No description needed', 'Element', b'0', 80),
(777, 'friction', '3', 'No description needed', 'Element', b'0', 80),
(778, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 80),
(779, 'isSensor', 'false', 'No description needed', 'Element', b'0', 80),
(780, 'position', '{''x'': -6, ''y'': 7}', 'Posición de la esfera', 'Element', b'1', 80),
(781, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 80),
(782, 'size', '{''width'': 4, ''height'': 1}', 'Radio de la esfera', 'Element', b'1', 80),
(783, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 80),
(784, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 80),
(785, 'isStatic', 'true', 'No description needed', 'Element', b'0', 81),
(786, 'density', '4', 'No description needed', 'Element', b'0', 81),
(787, 'friction', '3', 'No description needed', 'Element', b'0', 81),
(788, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 81),
(789, 'isSensor', 'false', 'No description needed', 'Element', b'0', 81),
(790, 'position', '{''x'': 6, ''y'': 7}', 'Posición de la esfera', 'Element', b'1', 81),
(791, 'elementType', '''Polygon''', 'No description needed', 'Element', b'0', 81),
(792, 'size', '{''width'': 4, ''height'': 1}', 'Radio de la esfera', 'Element', b'1', 81),
(793, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 81),
(794, 'image', '{''resource'':''block1''}', 'No description needed', 'Element', b'0', 81),
(795, 'density', '0', 'No description needed', 'Element', b'0', 84),
(796, 'friction', '2', 'No description needed', 'Element', b'0', 84),
(797, 'elasticity', '1', 'Elasticidad de la esfera', 'Element', b'1', 84),
(798, 'isSensor', 'false', 'No description needed', 'Element', b'0', 84),
(799, 'position', '{''x'': 0, ''y'': -5}', 'Posición de la esfera', 'Element', b'1', 84),
(800, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 84),
(801, 'mass', '1', 'Masa de la esfera', 'Element', b'1', 84),
(802, 'radio', '0.5', 'Radio de la esfera', 'Element', b'1', 84),
(803, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 84),
(804, 'image', '{''resource'':''sphere''}', 'No description needed', 'Element', b'0', 84),
(805, 'isStatic', 'true', 'estatic', 'Element', b'1', 82),
(806, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 82),
(807, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 82),
(808, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 82),
(809, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 82),
(810, 'isSensor', 'false', 'No description needed', 'Element', b'0', 82),
(811, 'position', '{''x'': 6, ''y'': 3}', 'No description needed', 'Element', b'0', 82),
(812, 'radio', '0.4', 'Radio de la esfera naranja', 'Element', b'1', 82),
(813, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 82),
(814, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 82),
(815, 'image', '{''resource'':''point''}', 'No description needed', 'Element', b'0', 82),
(816, 'isStatic', 'true', 'estatic', 'Element', b'1', 83),
(817, 'density', '4', 'Densidad de la esfera naranja', 'Element', b'1', 83),
(818, 'friction', '2', 'Fricción de la esfera naranja', 'Element', b'1', 83),
(819, 'mass', '1', 'Masa de la esfera naranja', 'Element', b'1', 83),
(820, 'elasticity', '1', 'Elasticidad de la esfera naranja', 'Element', b'1', 83),
(821, 'isSensor', 'false', 'No description needed', 'Element', b'0', 83),
(822, 'position', '{''x'': -6, ''y'': 3}', 'No description needed', 'Element', b'0', 83),
(823, 'radio', '0.4', 'Radio de la esfera naranja', 'Element', b'1', 83),
(824, 'elementType', '''Circle''', 'No description needed', 'Element', b'0', 83),
(825, 'isDrawable', 'true', 'No description needed', 'Element', b'0', 83),
(826, 'image', '{''resource'':''point''}', 'No description needed', 'Element', b'0', 83);

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `world`
--

DROP TABLE IF EXISTS `world`;
CREATE TABLE IF NOT EXISTS `world` (
  `world_id` int(11) NOT NULL AUTO_INCREMENT,
  `activity_id` int(11) DEFAULT NULL,
  `creation_script` text,
  PRIMARY KEY (`world_id`),
  KEY `activity_id` (`activity_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=21 ;

--
-- Volcar la base de datos para la tabla `world`
--

INSERT INTO `world` (`world_id`, `activity_id`, `creation_script`) VALUES
(1, 1, 'var origianElements = elements;\n\n     function createInteractiveWorld(){\n\n        var pendulo = getElementByName(''pendulo'');\n        var selement = getElementByName(''sphere'');\n        var radianAngle = pendulo.angle*Math.PI/180;\n        var posx = pendulo.radio*Math.cos(radianAngle);\n        var posy = pendulo.radio*Math.sin(radianAngle);\n\n        posx += selement.position.x;\n        posy += selement.position.y;\n\n\n        var aux = createWorldElement({name:''aux'',position:{x:posx,y:posy}, mass:10, radio: 0.1, elasticity:0,isStatic:true,elementType:''Circle'',image:pendulo.pointImage});\n        \n        var defJoint = new b2DistanceJointDef;\n        sphere = getBodyByName(''sphere'');pendulo\n        defJoint.Initialize(aux,sphere,\n            aux.GetWorldCenter(),\n            sphere.GetWorldCenter());\n        joint = world.CreateJoint(defJoint);\n\n        joints.push(joint);\n\n     }\n\n     function getWatchVariables(){\n        return [{name: ''sphere'', displayName:''Esfera'',\n                elements:[{name:''position'', displayName:''Posicion'', function:''sphere.GetPosition()'', isVector:''true''},\n                          {name:''velocity'', displayName:''Velocidad'', function:''sphere.GetLinearVelocity()'', isVector:''true''}]\n                }];\n     }\n \n     function getEditablesElements(){\n\n      return [{name:''pendulo'',displayName:''Pendulo'',\n                elements:[{name:''radio'',displayName:''Radio'', value:elements[1].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                           {name:''angulo'',displayName:''Angulo'', value:elements[1].angle,unity:''&deg;'',type:''float'',minVal:-360,maxVal:360}]\n                },\n                {name:''sphere'',displayName:''Esfera'',\n                elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[0].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                          {name:''position.y'',displayName:''Posicion Y'', value:elements[0].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                          {name:''mass'',displayName:''Masa'', value:elements[0].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                          {name:''radio'',displayName:''Radio'', value:elements[0].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                          {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\n                ]}\n              ];\n     }\n\n     function drawAdditionalData(context){\n        // Aqui pintamos el joint\n     }'),
(2, 14, 'needsMediaDensity = true;\nhasPullyJoints = true;\nelementsChanged = false;\n\nvar b2PulleyJointDef = Box2D.Dynamics.Joints.b2PulleyJointDef;\n\nfunction createInteractiveWorld(){\n    var anchor1 = bodies[2].body.GetWorldCenter();\n    var anchor2 = bodies[3].body.GetWorldCenter();\n    var groundAnchor1 = new b2Vec2(bodies[0].body.GetWorldCenter().x,bodies[0].body.GetWorldCenter().y- 1.5);\n    var groundAnchor2 = bodies[0].body.GetWorldCenter();\n    //var groundAnchor1 = bodies[0].body.GetWorldCenter();\n    ////var groundAnchor2 = bodies[0].body.GetWorldCenter();\n    var ratio = 1;\n    var pulleyJointDef = new b2PulleyJointDef();\n    pulleyJointDef.Initialize(bodies[2].body, bodies[3].body, groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);\n    pulleyJoint = world.CreateJoint(pulleyJointDef);\n    joints.push(pulleyJoint);\n    \n    anchor1 = bodies[3].body.GetWorldCenter();\n    anchor2 = bodies[4].body.GetWorldCenter();\n    var groundAnchor1 = bodies[1].body.GetWorldCenter();\n    var groundAnchor2 = new b2Vec2(bodies[1].body.GetWorldCenter().x,bodies[1].body.GetWorldCenter().y- 1.5);\n    //groundAnchor1 = bodies[1].body.GetWorldCenter(); \n    //groundAnchor2 = bodies[1].body.GetWorldCenter();\n    pulleyJointDef = new b2PulleyJointDef();\n    pulleyJointDef.Initialize(bodies[3].body, bodies[4].body, groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);\n    pulleyJoint = world.CreateJoint(pulleyJointDef);\n    joints.push(pulleyJoint);\n}\n\n\nfunction getWatchVariables(){\n    return [{name: ''sphere1'', displayName:''Esfera Naranja'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''sphere1.GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''sphere1.GetLinearVelocity()'', isVector:''true''}]\n            },\n            {name: ''sphere2'', displayName:''Esfera Amarilla'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''sphere2.GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''sphere2.GetLinearVelocity()'', isVector:''true''}]\n            },\n            {name: ''sphere3'', displayName:''Esfera Azul'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''sphere3.GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''sphere3.GetLinearVelocity()'', isVector:''true''}]\n            }];\n}\n\nfunction getEditablesElements(){\n\n    return [{name: ''pulley1'', displayName:''Polea 1'',\n            elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[0].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                {name:''position.y'',displayName:''Posicion Y'', value:elements[0].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''pulley2'', displayName:''Polea 2'',\n            elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[1].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                {name:''position.y'',displayName:''Posicion Y'', value:elements[1].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''sphere1'', displayName:''Esfera Naranja'',\n            elements:[{name:''radio'',displayName:''Radio'', value:elements[2].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                      {name:''position.x'',displayName:''Posicion X'', value:elements[2].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[2].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[2].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[2].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''sphere2'', displayName:''Esfera Naranja'',\n            elements:[{name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                      {name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[3].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''sphere3'', displayName:''Esfera Naranja'',\n            elements:[{name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                      {name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[4].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n            }];\n}\n\n function drawAdditionalData(context){\n    // Aqui pintamos el joint\n }'),
(3, 24, 'elementsChanged = false;\n\nfunction createInteractiveWorld(){\n\n    bodies[0].body.SetLinearVelocity(new b2Vec2(elements[1].value.x,elements[1].value.y));\n}\n\nfunction getWatchVariables(){\n    return [{name: ''sphere1'', displayName:''Esfera Naranja'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''sphere1.GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''sphere1.GetLinearVelocity()'', isVector:''true''}]\n            }];\n}\n\nfunction getEditablesElements(){\n\n    return [{name: ''velocity'', displayName:''Velocidad'',\n            elements:[{name:''value.x'',displayName:''X'', value:elements[1].value.x,unity:'''',type:''float'',minVal:0.1,maxVal:10},\n                {name:''value.y'',displayName:''Y'', value:elements[1].value.y,unity:'''',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''sphere1'', displayName:''Esfera'',\n            elements:[{name:''radio'',displayName:''Radio'', value:elements[0].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                      {name:''position.x'',displayName:''Posicion X'', value:elements[0].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[0].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[0].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n            }];\n}\n\n function drawAdditionalData(context){\n    // Aqui pintamos el joint\n }'),
(4, 2, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2RevoluteJointDef();	\r\n	the_joint0.Initialize(getBodyByName(''base''),getBodyByName(''dynamo1''), bodies[0].body.GetWorldCenter(), bodies[1].body.GetWorldCenter());\r\n	//the_joint0.Initialize(bodies[0].body, bodies[1].body, bodies[0].body.GetWorldCenter(), new b2Vec2(bodies[0].body.GetWorldCenter().x, bodies[1].body.GetWorldCenter().y));\r\n	the_joint0.collideConnected = true;\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	\r\n	var the_joint01 = new b2WeldJointDef();\r\n	the_joint01.Initialize(getBodyByName(''dynamo1''), getBodyByName(''dynamo2''), getBodyByName(''dynamo1'').GetWorldCenter());\r\n	var joint01 = world.CreateJoint(the_joint01);\r\n	\r\n	var the_joint1 = new b2DistanceJointDef();\r\n	the_joint1.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere1''), new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere1'').GetWorldCenter());\r\n	the_joint1.collideConnected = true;\r\n	var joint1 = world.CreateJoint(the_joint1);\r\n\r\n	var the_joint2 = new b2DistanceJointDef();\r\n	the_joint2.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere2''), new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere2'').GetWorldCenter());\r\n	the_joint2.collideConnected = true;\r\n	var joint2 = world.CreateJoint(the_joint2);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	context.fillStyle = "#FFFFFF";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";\r\n	//Asignar posicion y pintar fuerza\r\n	var	force = getBodyByName(''dynamo2'').GetLinearVelocity();\r\n	var text = "X: " + (force.x * 10).toFixed(2) + " Y: " + (force.y * 10).toFixed(2);\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''dynamo2'', displayName:''Plataforma'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''dynamo2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''dynamo2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera 1'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera 2'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n  return [{name:''dynamo2'',displayName:''Plataforma'',\r\n            elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n            ]},				\r\n			{name:''sphere1'',displayName:''Esfera 1'',\r\n            elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n            ]},\r\n			{name:''sphere2'',displayName:''Esfera 2'',\r\n            elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n            ]}\r\n          ];\r\n}'),
(5, 3, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2RevoluteJointDef();	\r\n	the_joint0.Initialize(getBodyByName(''base''),getBodyByName(''dynamo1''), bodies[0].body.GetWorldCenter(), bodies[1].body.GetWorldCenter());\r\n	//the_joint0.Initialize(bodies[0].body, bodies[1].body, bodies[0].body.GetWorldCenter(), new b2Vec2(bodies[0].body.GetWorldCenter().x, bodies[1].body.GetWorldCenter().y));\r\n	the_joint0.collideConnected = true;\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	\r\n	var the_joint01 = new b2WeldJointDef();\r\n	the_joint01.Initialize(getBodyByName(''dynamo1''), getBodyByName(''dynamo2''), getBodyByName(''dynamo1'').GetWorldCenter());\r\n	var joint01 = world.CreateJoint(the_joint01);\r\n	\r\n	var the_joint1 = new b2DistanceJointDef();\r\n	the_joint1.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere1''), new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere1'').GetWorldCenter());\r\n	the_joint1.collideConnected = true;\r\n	var joint1 = world.CreateJoint(the_joint1);\r\n\r\n	var the_joint2 = new b2DistanceJointDef();\r\n	the_joint2.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere2''), new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere2'').GetWorldCenter());\r\n	the_joint2.collideConnected = true;\r\n	var joint2 = world.CreateJoint(the_joint2);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	context.fillStyle = "#FFFFFF";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";\r\n	//Asignar posicion y pintar fuerza\r\n	var	force = getBodyByName(''dynamo2'').GetLinearVelocity();\r\n	var text = "X: " + (force.x * 10).toFixed(2) + " Y: " + (force.y * 10).toFixed(2);\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''dynamo2'', displayName:''Plataforma'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''dynamo2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''dynamo2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera 1'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera 2'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n      return [{name:''dynamo2'',displayName:''Plataforma'',\r\n                elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n                          {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n                ]},				\r\n				{name:''sphere1'',displayName:''Esfera 1'',\r\n                elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n                ]},\r\n				{name:''sphere2'',displayName:''Esfera 2'',\r\n                elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n                ]}\r\n              ];\r\n     }'),
(6, 13, 'elementsChanged = false;\n\nfunction createInteractiveWorld(){\n\n    \n}\n\nfunction getWatchVariables(){\n    return [{name: ''sphere1'', displayName:''Esfera Naranja'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\n            },\n            {name: ''sphere2'', displayName:''Esfera Amarilla'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\n            },\n            {name: ''sphere3'', displayName:''Esfera Azul'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere3\\'').GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere3\\'').GetLinearVelocity()'', isVector:''true''}]\n            },\n            {name: ''sphere4'', displayName:''Esfera Verde'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere4\\'').GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere4\\'').GetLinearVelocity()'', isVector:''true''}]\n            }];\n}\n\nfunction getEditablesElements(){\nreturn [{name: ''sphere1'', displayName:''Esfera Naranja'',\n            elements:[{name:''radio'',displayName:''Radio'', value:elements[0].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                      {name:''position.x'',displayName:''Posicion X'', value:elements[0].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[0].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[0].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''sphere2'', displayName:''Esfera Amarilla'',\n            elements:[{name:''radio'',displayName:''Radio'', value:elements[1].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                      {name:''position.x'',displayName:''Posicion X'', value:elements[1].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[1].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[1].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''sphere3'', displayName:''Esfera Azul'',\n            elements:[{name:''radio'',displayName:''Radio'', value:elements[2].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                      {name:''position.x'',displayName:''Posicion X'', value:elements[2].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[2].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[2].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[2].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''sphere4'', displayName:''Esfera Verde'',\n            elements:[{name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                      {name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[3].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n            }\n            ];\n}\n\n function drawAdditionalData(context){\n    // Aqui pintamos el joint\n }'),
(7, 4, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2RevoluteJointDef();	\r\n	the_joint0.Initialize(getBodyByName(''base''),getBodyByName(''dynamo1''), new b2Vec2(bodies[1].body.GetWorldCenter().x, bodies[0].body.GetWorldCenter().y), bodies[1].body.GetWorldCenter());\r\n	//the_joint0.Initialize(bodies[0].body, bodies[1].body, bodies[0].body.GetWorldCenter(), new b2Vec2(bodies[0].body.GetWorldCenter().x, bodies[1].body.GetWorldCenter().y));\r\n	the_joint0.collideConnected = true;\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	\r\n	var the_joint01 = new b2WeldJointDef();\r\n	the_joint01.Initialize(getBodyByName(''dynamo1''), getBodyByName(''dynamo2''), new b2Vec2(getBodyByName(''dynamo1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y));\r\n	var joint01 = world.CreateJoint(the_joint01);\r\n	\r\n	var the_joint1 = new b2DistanceJointDef();\r\n	the_joint1.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere1''), new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere1'').GetWorldCenter());\r\n	the_joint1.collideConnected = true;\r\n	var joint1 = world.CreateJoint(the_joint1);\r\n\r\n	var the_joint2 = new b2DistanceJointDef();\r\n	the_joint2.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere2''), new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere2'').GetWorldCenter());\r\n	the_joint2.collideConnected = true;\r\n	var joint2 = world.CreateJoint(the_joint2);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	context.fillStyle = "#FFFFFF";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";\r\n	//Asignar posicion y pintar fuerza\r\n	var	force = getBodyByName(''dynamo2'').GetLinearVelocity();\r\n	var text = "X: " + (force.x * 10).toFixed(2) + " Y: " + (force.y * 10).toFixed(2);\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''dynamo2'', displayName:''Plataforma'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''dynamo2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''dynamo2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera 1'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera 2'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n    return [{name:''dynamo2'',displayName:''Plataforma'',\r\n		elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},				\r\n		{name:''sphere1'',displayName:''Esfera 1'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},\r\n		{name:''sphere2'',displayName:''Esfera 2'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]}\r\n	  ];\r\n }'),
(8, 5, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2RevoluteJointDef();	\r\n	the_joint0.Initialize(getBodyByName(''base''),getBodyByName(''dynamo1''), new b2Vec2(bodies[1].body.GetWorldCenter().x, bodies[0].body.GetWorldCenter().y), bodies[1].body.GetWorldCenter());\r\n	//the_joint0.Initialize(bodies[0].body, bodies[1].body, bodies[0].body.GetWorldCenter(), new b2Vec2(bodies[0].body.GetWorldCenter().x, bodies[1].body.GetWorldCenter().y));\r\n	the_joint0.collideConnected = true;\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	\r\n	var the_joint01 = new b2WeldJointDef();\r\n	the_joint01.Initialize(getBodyByName(''dynamo1''), getBodyByName(''dynamo2''), new b2Vec2(getBodyByName(''dynamo1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y));\r\n	var joint01 = world.CreateJoint(the_joint01);\r\n	\r\n	var the_joint1 = new b2DistanceJointDef();\r\n	the_joint1.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere1''), new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere1'').GetWorldCenter());\r\n	the_joint1.collideConnected = true;\r\n	var joint1 = world.CreateJoint(the_joint1);\r\n\r\n	var the_joint2 = new b2DistanceJointDef();\r\n	the_joint2.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere2''), new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere2'').GetWorldCenter());\r\n	the_joint2.collideConnected = true;\r\n	var joint2 = world.CreateJoint(the_joint2);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	context.fillStyle = "#000000";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";\r\n	//Asignar posicion y pintar fuerza\r\n	var	force = getBodyByName(''dynamo2'').GetLinearVelocity();\r\n	var text = "X: " + (force.x * 10).toFixed(2) + " Y: " + (force.y * 10).toFixed(2);\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''dynamo2'', displayName:''Plataforma'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''dynamo2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''dynamo2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera 1'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera 2'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n    return [{name:''dynamo2'',displayName:''Plataforma'',\r\n		elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},				\r\n		{name:''sphere1'',displayName:''Esfera 1'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},\r\n		{name:''sphere2'',displayName:''Esfera 2'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]}\r\n	  ];\r\n }\r\n'),
(9, 9, 'needsMediaDensity = false;\nhasPullyJoints = true;\n\n\nfunction createInteractiveWorld(){  \n    var the_joint0 = new b2PulleyJointDef();    \n    var anchor1 = getBodyByName(''sphere1'').GetWorldCenter();\n    var anchor2 = new getBodyByName(''sphere2'').GetWorldCenter();    \n        var groundAnchor1 = new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x - 0.0165, getBodyByName(''sphere1'').GetWorldCenter().y - 6.55);      \n    var groundAnchor2 = new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x - 6.0165, getBodyByName(''sphere2'').GetWorldCenter().y - 5.05);       \n    var ratio = 1.0;    \n    the_joint0.Initialize(getBodyByName(''sphere1''), getBodyByName(''sphere2''), groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);   \n    var joint0 = world.CreateJoint(the_joint0);     \n        joints.push(joint0);\n    getBodyByName(''plane'').SetPositionAndAngle(getBodyByName(''plane'').GetPosition(), 3.1415/4.5);\n}\n\nfunction drawAdditionalData(context){\n    \n}\n\nfunction getWatchVariables(){\n    return [{name: ''plane'', displayName:''Plano inclinado'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''plane\\'').GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''plane\\'').GetLinearVelocity()'', isVector:''true''}]\n            },\n            {name: ''sphere1'', displayName:''Esfera amarilla'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\n            },\n            {name: ''sphere2'', displayName:''Esfera naranja'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\n            }];\n}\n\nfunction getEditablesElements(){\n\n    return [{name:''plane'',displayName:''Plano inclinado'',\n        elements:[{name:''mass'',displayName:''Masa'', value:elements[0].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\n        ]},             \n        {name:''sphere1'',displayName:''Esfera 1'',\n        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[2].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                  {name:''position.y'',displayName:''Posicion Y'', value:elements[2].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                  {name:''mass'',displayName:''Masa'', value:elements[2].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                  {name:''radio'',displayName:''Radio'', value:elements[2].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[2].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\n        ]},\n        {name:''sphere2'',displayName:''Esfera 2'',\n        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\n        ]}\n    ];\n}'),
(10, 10, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2PulleyJointDef();	\r\n	var anchor1 = getBodyByName(''sphere1'').GetWorldCenter();\r\n	var anchor2 = new getBodyByName(''sphere2'').GetWorldCenter(); \r\n	var groundAnchor1 = new b2Vec2(4.25, 4.5);\r\n	var groundAnchor2 = new b2Vec2(4.25, 4.5); \r\n	var ratio = 1.0;	\r\n	the_joint0.Initialize(getBodyByName(''sphere1''), getBodyByName(''sphere2''), groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);	\r\n	var joint0 = world.CreateJoint(the_joint0);		\r\n	getBodyByName(''plane'').SetPositionAndAngle(getBodyByName(''plane'').GetPosition(), 3.1415/6.1);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''plane'', displayName:''Plano inclinado'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''plane\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''plane\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera amarilla'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera naranja'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n	return [{name:''plane'',displayName:''Plano inclinado'',\r\n        elements:[{name:''mass'',displayName:''Masa'', value:elements[0].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]},				\r\n		{name:''sphere1'',displayName:''Esfera 1'',\r\n        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[2].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''position.y'',displayName:''Posicion Y'', value:elements[2].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''mass'',displayName:''Masa'', value:elements[2].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''radio'',displayName:''Radio'', value:elements[2].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[2].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]},\r\n		{name:''sphere2'',displayName:''Esfera 2'',\r\n        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]}\r\n    ];\r\n}'),
(11, 11, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2PulleyJointDef();	\r\n	var anchor1 = getBodyByName(''sphere1'').GetWorldCenter();\r\n	var anchor2 = new getBodyByName(''sphere2'').GetWorldCenter(); \r\n	var groundAnchor1 = new b2Vec2(4.25, 4.5);\r\n	var groundAnchor2 = new b2Vec2(4.25, 4.5); \r\n	var ratio = 1.0;	\r\n	the_joint0.Initialize(getBodyByName(''sphere1''), getBodyByName(''sphere2''), groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);	\r\n	var joint0 = world.CreateJoint(the_joint0);		\r\n	getBodyByName(''plane'').SetPositionAndAngle(getBodyByName(''plane'').GetPosition(), 3.1415/10);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''plane'', displayName:''Plano inclinado'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''plane\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''plane\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera amarilla'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera naranja'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n    return [{name:''plane'',displayName:''Plano inclinado'',\r\n        elements:[{name:''mass'',displayName:''Masa'', value:elements[0].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]},				\r\n		{name:''sphere1'',displayName:''Esfera 1'',\r\n        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[2].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''position.y'',displayName:''Posicion Y'', value:elements[2].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''mass'',displayName:''Masa'', value:elements[2].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''radio'',displayName:''Radio'', value:elements[2].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[2].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]},\r\n		{name:''sphere2'',displayName:''Esfera 2'',\r\n        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]}\r\n    ];\r\n}\r\n');
INSERT INTO `world` (`world_id`, `activity_id`, `creation_script`) VALUES
(12, 6, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2RevoluteJointDef();	\r\n	the_joint0.Initialize(getBodyByName(''base''),getBodyByName(''dynamo1''), new b2Vec2(bodies[1].body.GetWorldCenter().x, bodies[0].body.GetWorldCenter().y), bodies[1].body.GetWorldCenter());\r\n	//the_joint0.Initialize(bodies[0].body, bodies[1].body, bodies[0].body.GetWorldCenter(), new b2Vec2(bodies[0].body.GetWorldCenter().x, bodies[1].body.GetWorldCenter().y));\r\n	the_joint0.collideConnected = true;\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	\r\n	var the_joint01 = new b2WeldJointDef();\r\n	the_joint01.Initialize(getBodyByName(''dynamo1''), getBodyByName(''dynamo2''), new b2Vec2(getBodyByName(''dynamo1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y));\r\n	var joint01 = world.CreateJoint(the_joint01);\r\n	\r\n	var the_joint1 = new b2DistanceJointDef();\r\n	the_joint1.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere1''), new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere1'').GetWorldCenter());\r\n	the_joint1.collideConnected = true;\r\n	var joint1 = world.CreateJoint(the_joint1);\r\n\r\n	var the_joint2 = new b2DistanceJointDef();\r\n	the_joint2.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere2''), new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere2'').GetWorldCenter());\r\n	the_joint2.collideConnected = true;\r\n	var joint2 = world.CreateJoint(the_joint2);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	context.fillStyle = "#000000";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";\r\n	//Asignar posicion y pintar fuerza\r\n	var	force = getBodyByName(''dynamo2'').GetLinearVelocity();\r\n	var text = "X: " + (force.x * 10).toFixed(2) + " Y: " + (force.y * 10).toFixed(2);\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''dynamo2'', displayName:''Plataforma'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''dynamo2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''dynamo2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera 1'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera 2'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n    return [{name:''dynamo2'',displayName:''Plataforma'',\r\n		elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},				\r\n		{name:''sphere1'',displayName:''Esfera 1'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},\r\n		{name:''sphere2'',displayName:''Esfera 2'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]}\r\n	  ];\r\n }'),
(13, 7, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2RevoluteJointDef();	\r\n	the_joint0.Initialize(getBodyByName(''base''),getBodyByName(''dynamo1''), new b2Vec2(bodies[1].body.GetWorldCenter().x, bodies[0].body.GetWorldCenter().y), bodies[1].body.GetWorldCenter());\r\n	//the_joint0.Initialize(bodies[0].body, bodies[1].body, bodies[0].body.GetWorldCenter(), new b2Vec2(bodies[0].body.GetWorldCenter().x, bodies[1].body.GetWorldCenter().y));\r\n	the_joint0.collideConnected = true;\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	\r\n	var the_joint01 = new b2WeldJointDef();\r\n	the_joint01.Initialize(getBodyByName(''dynamo1''), getBodyByName(''dynamo2''), new b2Vec2(getBodyByName(''dynamo1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y));\r\n	var joint01 = world.CreateJoint(the_joint01);\r\n	\r\n	var the_joint1 = new b2DistanceJointDef();\r\n	the_joint1.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere1''), new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere1'').GetWorldCenter());\r\n	the_joint1.collideConnected = true;\r\n	var joint1 = world.CreateJoint(the_joint1);\r\n\r\n	var the_joint2 = new b2DistanceJointDef();\r\n	the_joint2.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere2''), new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere2'').GetWorldCenter());\r\n	the_joint2.collideConnected = true;\r\n	var joint2 = world.CreateJoint(the_joint2);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	context.fillStyle = "#000000";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";\r\n	//Asignar posicion y pintar fuerza\r\n	var	force = getBodyByName(''dynamo2'').GetLinearVelocity();\r\n	var text = "X: " + (force.x * 10).toFixed(2) + " Y: " + (force.y * 10).toFixed(2);\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''dynamo2'', displayName:''Plataforma'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''dynamo2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''dynamo2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera 1'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera 2'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n    return [{name:''dynamo2'',displayName:''Plataforma'',\r\n		elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},				\r\n		{name:''sphere1'',displayName:''Esfera 1'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},\r\n		{name:''sphere2'',displayName:''Esfera 2'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]}\r\n	  ];\r\n }'),
(14, 8, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2RevoluteJointDef();	\r\n	the_joint0.Initialize(getBodyByName(''base''),getBodyByName(''dynamo1''), new b2Vec2(bodies[1].body.GetWorldCenter().x, bodies[0].body.GetWorldCenter().y), bodies[1].body.GetWorldCenter());\r\n	//the_joint0.Initialize(bodies[0].body, bodies[1].body, bodies[0].body.GetWorldCenter(), new b2Vec2(bodies[0].body.GetWorldCenter().x, bodies[1].body.GetWorldCenter().y));\r\n	the_joint0.collideConnected = true;\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	\r\n	var the_joint01 = new b2WeldJointDef();\r\n	the_joint01.Initialize(getBodyByName(''dynamo1''), getBodyByName(''dynamo2''), new b2Vec2(getBodyByName(''dynamo1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y));\r\n	var joint01 = world.CreateJoint(the_joint01);\r\n	\r\n	var the_joint1 = new b2DistanceJointDef();\r\n	the_joint1.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere1''), new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere1'').GetWorldCenter());\r\n	the_joint1.collideConnected = true;\r\n	var joint1 = world.CreateJoint(the_joint1);\r\n\r\n	var the_joint2 = new b2DistanceJointDef();\r\n	the_joint2.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere2''), new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere2'').GetWorldCenter());\r\n	the_joint2.collideConnected = true;\r\n	var joint2 = world.CreateJoint(the_joint2);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	context.fillStyle = "#000000";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";\r\n	//Asignar posicion y pintar fuerza\r\n	var	force = getBodyByName(''dynamo2'').GetLinearVelocity();\r\n	var text = "X: " + (force.x * 10).toFixed(2) + " Y: " + (force.y * 10).toFixed(2);\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''dynamo2'', displayName:''Plataforma'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''dynamo2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''dynamo2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera 1'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera 2'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n    return [{name:''dynamo2'',displayName:''Plataforma'',\r\n		elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},				\r\n		{name:''sphere1'',displayName:''Esfera 1'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},\r\n		{name:''sphere2'',displayName:''Esfera 2'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]}\r\n	  ];\r\n }'),
(15, 25, 'elementsChanged = false;\n\nfunction createInteractiveWorld(){\n\n    bodies[0].body.SetLinearVelocity(new b2Vec2(elements[2].value.x,elements[2].value.y));\n    bodies[1].body.SetLinearVelocity(new b2Vec2(elements[3].value.x,elements[3].value.y));\n}\n\nfunction getWatchVariables(){\n    return [{name: ''sphere1'', displayName:''Esfera Naranja'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''sphere1.GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''sphere1.GetLinearVelocity()'', isVector:''true''}]\n            },\n            {name: ''sphere1'', displayName:''Esfera Azul'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''sphere2.GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''sphere2.GetLinearVelocity()'', isVector:''true''}]\n            }];\n}\n\nfunction getEditablesElements(){\n\n    return [{name: ''velocity1'', displayName:''Velocidad Esfera Naranja'',\n            elements:[{name:''value.x'',displayName:''X'', value:elements[2].position.x,unity:'''',type:''float'',minVal:0.1,maxVal:10},\n                {name:''value.y'',displayName:''Y'', value:elements[2].position.y,unity:'''',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''velocity2'', displayName:''Velocidad Esfera Azul'',\n            elements:[{name:''value.x'',displayName:''X'', value:elements[3].position.x,unity:'''',type:''float'',minVal:0.1,maxVal:10},\n                {name:''value.y'',displayName:''Y'', value:elements[3].position.y,unity:'''',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''sphere1'', displayName:''Esfera Naranja'',\n            elements:[{name:''radio'',displayName:''Radio'', value:elements[0].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                      {name:''position.x'',displayName:''Posicion X'', value:elements[0].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[0].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[0].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''sphere1'', displayName:''Esfera Azul'',\n            elements:[{name:''radio'',displayName:''Radio'', value:elements[1].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                      {name:''position.x'',displayName:''Posicion X'', value:elements[1].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[1].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[1].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n            }];\n}\n\n function drawAdditionalData(context){\n    // Aqui pintamos el joint\n }'),
(16, 15, 'elementsChanged = false;\n\nfunction createInteractiveWorld(){\n    var velocity = elements[2].value;   \n    getBodyByName(''box'').SetLinearVelocity(new b2Vec2(velocity.x,velocity.y));  \n}\n\nfunction getWatchVariables(){\n    return [{name: ''box'', displayName:''Caja'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''box\\'').GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''box\\'').GetLinearVelocity()'', isVector:''true''}]\n            }];\n}\n\nfunction getEditablesElements(){\n\n    return [{name: ''velocity'', displayName:''Impulso de la caja'',\n            elements:[{name:''value.x'',displayName:''X'', value:elements[2].value.x,unity:'''',type:''float'',minVal:0.1,maxVal:10},\n                {name:''value.y'',displayName:''Y'', value:elements[2].value.y,unity:'''',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''box'', displayName:''Caja'',\n            elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[1].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[1].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[1].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''friction'',displayName:''Friccion'', value:elements[1].friction,unity:'''',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''floor'', displayName:''Plataforma'',\n            elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[0].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[0].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[0].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''friction'',displayName:''Friccion'', value:elements[0].friction,unity:'''',type:''float'',minVal:0.1,maxVal:10}]\n            }];\n}\n\n function drawAdditionalData(context){ \n    getBodyByName(''box'').ApplyImpulse(new b2Vec2(elements[2].value.x,elements[2].value.y), getBodyByName(''box'').GetPosition());\n }\n'),
(17, 16, 'elementsChanged = false;\n\nfunction createInteractiveWorld(){\n    var velocity = elements[2].value;   \n    getBodyByName(''box'').SetLinearVelocity(new b2Vec2(velocity.x,velocity.y));  \n}\n\nfunction getWatchVariables(){\n    return [{name: ''box'', displayName:''Caja'',\n            elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''box\\'').GetPosition()'', isVector:''true''},\n                      {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''box\\'').GetLinearVelocity()'', isVector:''true''}]\n            }];\n}\n\nfunction getEditablesElements(){\n\n    return [{name: ''velocity'', displayName:''Impulso de la caja'',\n            elements:[{name:''value.x'',displayName:''X'', value:elements[2].value.x,unity:'''',type:''float'',minVal:0.1,maxVal:10},\n                {name:''value.y'',displayName:''Y'', value:elements[2].value.y,unity:'''',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''box'', displayName:''Caja'',\n            elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[1].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[1].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[1].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''friction'',displayName:''Friccion'', value:elements[1].friction,unity:'''',type:''float'',minVal:0.1,maxVal:10}]\n            },\n            {name: ''floor'', displayName:''Plataforma'',\n            elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[0].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[0].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''mass'',displayName:''Masa'', value:elements[0].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10},\n                      {name:''friction'',displayName:''Friccion'', value:elements[0].friction,unity:'''',type:''float'',minVal:0.1,maxVal:10}]\n            }];\n}\n\n function drawAdditionalData(context){ \n    getBodyByName(''box'').ApplyImpulse(new b2Vec2(elements[2].value.x,elements[2].value.y), getBodyByName(''box'').GetPosition());\n }\n'),
(18, 17, 'elementsChanged = false;\r\nhasPullyJoints = true;\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2PulleyJointDef();	\r\n	var anchor1 = getBodyByName(''base'').GetWorldCenter();\r\n	var anchor2 = getBodyByName(''sphere1'').GetWorldCenter(); 	\r\n	var groundAnchor1 = new b2Vec2(anchor1.x + 4.5249, anchor1.y - 2.47);\r\n	var groundAnchor2 = new b2Vec2(anchor2.x + 0.0249, anchor2.y - 4.97); \r\n	var ratio = 1.0;	\r\n	the_joint0.Initialize(getBodyByName(''base''), getBodyByName(''sphere1''), groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);	\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	joints.push(joint0);\r\n}\r\n\r\nfunction drawAdditionalData(context){	\r\n	context.fillStyle = "#FFF";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";	\r\n	//Calculamos la fuerza ejercida sobre el objeto \r\n	//Constante G\r\n	var G = 6.67428e-11;\r\n	var EARTH_MASS = 5.97e27;\r\n	var body_mass = getBodyByName(''sphere1'').GetMass();\r\n	var force = [];\r\n	force[''x''] = 0.00;\r\n	force[''y''] = (G * (EARTH_MASS * body_mass)) / 4.06807e13;\r\n	//Asignar posicion y pintar fuerza\r\n	var text = "X: " + (force.x * 10).toFixed(2) + "N Y: " + (force.y * 10).toFixed(2) + "N";\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''sphere1'', displayName:''Esfera'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n      return [{name:''sphere1'',displayName:''Esfera'',\r\n                elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''radio'',displayName:''Radio'', value:elements[1].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n                ]}\r\n              ];\r\n     }'),
(19, 18, 'elementsChanged = false;\r\nhasPullyJoints = true;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2PulleyJointDef();	\r\n	var anchor1 = getBodyByName(''base'').GetWorldCenter();\r\n	var anchor2 = getBodyByName(''sphere1'').GetWorldCenter(); 	\r\n	var groundAnchor1 = new b2Vec2(anchor1.x - 3.2249, anchor1.y - 0.030);\r\n	var groundAnchor2 = new b2Vec2(anchor2.x - 2.2751, anchor2.y - 5.47); 	\r\n	var ratio = 1.0;	\r\n	the_joint0.Initialize(getBodyByName(''base''), getBodyByName(''sphere1''), groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);	\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	joints.push(joint0);\r\n	\r\n	the_joint0 = new b2PulleyJointDef();	\r\n	anchor1 = getBodyByName(''base2'').GetWorldCenter();\r\n	anchor2 = getBodyByName(''sphere1'').GetWorldCenter(); 	\r\n	groundAnchor1 = new b2Vec2(anchor1.x - 3.0251, anchor1.y);\r\n	groundAnchor2 = new b2Vec2(anchor2.x + 2.2249, anchor2.y - 5.47); 		 \r\n	ratio = 1.0;	\r\n	the_joint0.Initialize(getBodyByName(''base''), getBodyByName(''sphere1''), groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);	\r\n	joint0 = world.CreateJoint(the_joint0);\r\n	joints.push(joint0);\r\n}\r\n\r\nfunction drawAdditionalData(context){	\r\n	context = document.getElementById("canvas").getContext("2d");\r\n	context.fillStyle = "#FFF";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";	\r\n	//Calculamos la fuerza ejercida sobre el objeto \r\n	//Constante G\r\n	var G = 6.67428e-11;\r\n	var EARTH_MASS = 5.97e27;\r\n	var body_mass = getBodyByName(''sphere1'').GetMass();\r\n	var force = [];\r\n	force[''x''] = ((G * (EARTH_MASS * body_mass)) / 4.06807e13) / 2;\r\n	force[''y''] = 0.00;\r\n	//Asignar posicion y pintar fuerza\r\n	var text = "X: " + (force.x * 10).toFixed(2) + "N Y: " + (force.y * 10).toFixed(2) + "N";\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n	context.fillText(text, \r\n					(getBodyByName(''base2'').GetPosition().x * zoom) - (fontSize * text.length)/4,\r\n					(getBodyByName(''base2'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''sphere1'', displayName:''Esfera'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n      return [{name:''sphere1'',displayName:''Esfera'',\r\n                elements:[{name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n                ]}\r\n              ];\r\n     }'),
(20, 19, 'elementsChanged = false;\r\nhasPullyJoints = true;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2PulleyJointDef();	\r\n	var anchor1 = getBodyByName(''base'').GetWorldCenter();\r\n	var anchor2 = getBodyByName(''sphere1'').GetWorldCenter(); 	\r\n	var groundAnchor1 = new b2Vec2(anchor1.x + 0.0249, anchor1.y + 2.03);\r\n	var groundAnchor2 = new b2Vec2(anchor2.x - 2.976, anchor2.y - 3.9703); 				\r\n	var ratio = 1.0;	\r\n	the_joint0.Initialize(getBodyByName(''base''), getBodyByName(''sphere1''), groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);	\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	joints.push(joint0);\r\n	\r\n	the_joint0 = new b2PulleyJointDef();	\r\n	anchor1 = getBodyByName(''base2'').GetWorldCenter();\r\n	anchor2 = getBodyByName(''sphere1'').GetWorldCenter(); 	\r\n	groundAnchor1 = new b2Vec2(anchor1.x + 0.0249, anchor1.y + 2.03);\r\n	groundAnchor2 = new b2Vec2(anchor2.x + 3.0249, anchor2.y - 3.97); 		 	\r\n	ratio = 1.0;	\r\n	the_joint0.Initialize(getBodyByName(''base''), getBodyByName(''sphere1''), groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);	\r\n	joint0 = world.CreateJoint(the_joint0);\r\n	joints.push(joint0);\r\n}\r\n\r\nfunction drawAdditionalData(context){	\r\n	context = document.getElementById("canvas").getContext("2d");\r\n	context.fillStyle = "#FFF";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";	\r\n	//Calculamos la fuerza ejercida sobre el objeto \r\n	//Constante G\r\n	var G = 6.67428e-11;\r\n	var EARTH_MASS = 5.97e27;\r\n	var body_mass = getBodyByName(''sphere1'').GetMass();\r\n	var force = [];\r\n	force[''x''] = 0.00;\r\n	force[''y''] = ((G * (EARTH_MASS * body_mass)) / 4.06807e13) / 2;\r\n	//Asignar posicion y pintar fuerza\r\n	var text = "X: " + (force.x * 10).toFixed(2) + "N Y: " + (force.y * 10).toFixed(2) + "N";\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n	context.fillText(text, \r\n					(getBodyByName(''base2'').GetPosition().x * zoom) - (fontSize * text.length)/4,\r\n					(getBodyByName(''base2'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''sphere1'', displayName:''Esfera'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n      return [{name:''sphere1'',displayName:''Esfera'',\r\n                elements:[{name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n                ]}\r\n              ];\r\n     }');

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `worldelement`
--

DROP TABLE IF EXISTS `worldelement`;
CREATE TABLE IF NOT EXISTS `worldelement` (
  `world_element_id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `display_name` varchar(45) DEFAULT NULL,
  `world_id` int(11) DEFAULT NULL,
  PRIMARY KEY (`world_element_id`),
  KEY `world_id_ix` (`world_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=utf8 AUTO_INCREMENT=85 ;

--
-- Volcar la base de datos para la tabla `worldelement`
--

INSERT INTO `worldelement` (`world_element_id`, `name`, `display_name`, `world_id`) VALUES
(1, 'sphere', 'Esfera', 1),
(2, 'pendulo', 'Péndulo', 1),
(3, 'pulley1', 'Polea 1', 2),
(4, 'pulley2', 'Polea 2', 2),
(5, 'sphere1', 'Esfera naranja', 2),
(6, 'sphere2', 'Esfera amarilla', 2),
(7, 'sphere3', 'Esfera azul', 2),
(8, 'velocity', 'Velocidad', 3),
(9, 'sphere1', 'Esfera', 3),
(10, 'base', 'Base', 4),
(11, 'dynamo1', 'Dinamo 1', 4),
(12, 'dynamo2', 'Dinamo 2', 4),
(13, 'sphere1', 'Esfera naranja', 4),
(14, 'sphere2', 'Esfera azul', 4),
(15, 'base', 'Base', 5),
(16, 'dynamo1', 'Dinamo 1', 5),
(17, 'dynamo2', 'Dinamo 2', 5),
(18, 'sphere1', 'Esfera naranja', 5),
(19, 'sphere2', 'Esfera azul', 5),
(20, 'sphere1', 'Esfera naranja', 6),
(21, 'sphere2', 'Esfera amarilla', 6),
(22, 'sphere3', 'Esfera azul', 6),
(23, 'sphere4', 'Esfera verde', 6),
(24, 'dynamo2', 'Base', 6),
(25, 'base', 'Base', 7),
(26, 'dynamo1', 'Dinamo 1', 7),
(27, 'dynamo2', 'Dinamo 2', 7),
(28, 'sphere1', 'Esfera naranja', 7),
(29, 'sphere2', 'Esfera azul', 7),
(30, 'base', 'Base', 8),
(31, 'dynamo1', 'Dinamo 1', 8),
(32, 'dynamo2', 'Dinamo 2', 8),
(33, 'sphere1', 'Esfera naranja', 8),
(34, 'sphere2', 'Esfera azul', 8),
(35, 'plane', 'Plano inclinado', 9),
(36, 'pulley', 'Polea', 9),
(37, 'sphere1', 'Esfera amarilla', 9),
(38, 'sphere2', 'Esfera naranja', 9),
(39, 'plane', 'Plano inclinado', 10),
(40, 'pulley', 'Polea', 10),
(41, 'sphere1', 'Esfera amarilla', 10),
(42, 'sphere2', 'Esfera naranja', 10),
(43, 'plane', 'Plano inclinado', 11),
(44, 'pulley', 'Polea', 11),
(45, 'sphere1', 'Esfera amarilla', 11),
(46, 'sphere2', 'Esfera naranja', 11),
(47, 'base', 'Base', 12),
(48, 'dynamo1', 'Dinamo 1', 12),
(49, 'dynamo2', 'Dinamo 2', 12),
(50, 'sphere1', 'Esfera naranja', 12),
(51, 'sphere2', 'Esfera azul', 12),
(52, 'base', 'Base', 13),
(53, 'dynamo1', 'Dinamo 1', 13),
(54, 'dynamo2', 'Dinamo 2', 13),
(55, 'sphere1', 'Esfera naranja', 13),
(56, 'sphere2', 'Esfera azul', 13),
(57, 'base', 'Base', 14),
(58, 'dynamo1', 'Dinamo 1', 14),
(59, 'dynamo2', 'Dinamo 2', 14),
(60, 'sphere1', 'Esfera naranja', 14),
(61, 'sphere2', 'Esfera azul', 14),
(62, 'sphere1', 'Esfera Naranja', 15),
(63, 'sphere2', 'Esfera Azul', 15),
(64, 'velocity1', 'Velocidad Esfera Naranja', 15),
(65, 'velocity2', 'Velocidad Esfera Azul', 15),
(66, 'floor', 'Plataforma', 16),
(67, 'box', 'Caja', 16),
(68, 'velocity', 'Impulso a caja', 16),
(69, 'floor', 'Plataforma', 17),
(70, 'box', 'Caja', 17),
(71, 'velocity', 'Impulso a caja', 17),
(72, 'base', 'Base', 18),
(73, 'sphere1', 'Esfera', 18),
(74, 'pulley', 'Polea', 18),
(75, 'base', 'Base 1', 19),
(76, 'base2', 'Base 2', 19),
(77, 'sphere1', 'Esfera', 19),
(78, 'pulley1', 'Polea 1', 19),
(79, 'pulley2', 'Polea 2', 19),
(80, 'base', 'Base 1', 20),
(81, 'base2', 'Base 2', 20),
(82, 'pulley1', 'Polea 1', 20),
(83, 'pulley2', 'Polea 2', 20),
(84, 'sphere1', 'Esfera', 20);

--
-- Filtros para las tablas descargadas (dump)
--

--
-- Filtros para la tabla `worldelement`
--
ALTER TABLE `worldelement`
  ADD CONSTRAINT `fk_WorldElement_1` FOREIGN KEY (`world_id`) REFERENCES `world` (`world_id`) ON DELETE CASCADE ON UPDATE CASCADE;
