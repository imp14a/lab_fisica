-- phpMyAdmin SQL Dump
-- version 3.2.0.1
-- http://www.phpmyadmin.net
--
-- Servidor: localhost
-- Tiempo de generación: 12-09-2013 a las 17:03:50
-- Versión del servidor: 5.1.37
-- Versión de PHP: 5.3.0

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";

--
-- Base de datos: `lab_fisica`
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla `world`
--

DROP TABLE IF EXISTS `world`;
CREATE TABLE IF NOT EXISTS `world` (
  `world_id` int(11) NOT NULL AUTO_INCREMENT,
  `activity_id` int(11) DEFAULT NULL,
  `creation_script` text,
  PRIMARY KEY (`world_id`),
  KEY `activity_id` (`activity_id`)
) ENGINE=InnoDB  DEFAULT CHARSET=latin1 AUTO_INCREMENT=11 ;

--
-- Volcar la base de datos para la tabla `world`
--

INSERT INTO `world` (`world_id`, `activity_id`, `creation_script`) VALUES
(1, 1, 'var origianElements = elements;\n\n     function createInteractiveWorld(){\n\n        var pendulo = getElementByName(''pendulo'');\n        var selement = getElementByName(''sphere'');\n        var radianAngle = pendulo.angle*Math.PI/180;\n        var posx = pendulo.radio*Math.cos(radianAngle);\n        var posy = pendulo.radio*Math.sin(radianAngle);\n\n        posx += selement.position.x;\n        posy += selement.position.y;\n\n\n        var aux = createWorldElement({name:''aux'',position:{x:posx,y:posy}, mass:10, radio: 0.1, elasticity:0,isStatic:true,elementType:''Circle'',image:pendulo.pointImage});\n        \n        var defJoint = new b2DistanceJointDef;\n        sphere = getBodyByName(''sphere'');pendulo\n        defJoint.Initialize(aux,sphere,\n            aux.GetWorldCenter(),\n            sphere.GetWorldCenter());\n        joint = world.CreateJoint(defJoint);\n\n        joints.push(joint);\n\n     }\n\n     function getWatchVariables(){\n        return [{name: ''sphere'', displayName:''Esfera'',\n                elements:[{name:''position'', displayName:''Posicion'', function:''sphere.GetPosition()'', isVector:''true''},\n                          {name:''velocity'', displayName:''Velocidad'', function:''sphere.GetLinearVelocity()'', isVector:''true''}]\n                }];\n     }\n \n     function getEditablesElements(){\n\n      return [{name:''pendulo'',displayName:''Pendulo'',\n                elements:[{name:''radio'',displayName:''Radio'', value:elements[1].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n                           {name:''angulo'',displayName:''Angulo'', value:elements[1].angle,unity:''&deg;'',type:''float'',minVal:-360,maxVal:360}]\n                },\n                {name:''sphere'',displayName:''Esfera'',\n                elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[0].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                          {name:''position.y'',displayName:''Posicion Y'', value:elements[0].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                          {name:''mass'',displayName:''Masa'', value:elements[0].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n                          {name:''radio'',displayName:''Radio'', value:elements[0].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n                          {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\n                ]}\n              ];\n     }\n\n     function setValuesForElement(name,property,value){\n        var element = getElementByName(name);\n        if(element!=null){\n            el = property.split(''.'');\n            if(el.length>1)\n                element[el[0]][el[1]] = value;\n            else\n                element[property] = value;\n        }\n\n     }\n\n     function drawAdditionalData(context){\n        // Aqui pintamos el joint\n     }'),
(2, 14, 'needsMediaDensity = true;\nhasPullyJoints = true;\nelementsChanged = false;\n\nvar b2PulleyJointDef = Box2D.Dynamics.Joints.b2PulleyJointDef;\n\nfunction createInteractiveWorld(){\n	var anchor1 = bodies[2].body.GetWorldCenter();\n	var anchor2 = bodies[3].body.GetWorldCenter();\n	var groundAnchor1 = new b2Vec2(bodies[0].body.GetWorldCenter().x,bodies[0].body.GetWorldCenter().y- 1.5);\n	var groundAnchor2 = bodies[0].body.GetWorldCenter();\n	//var groundAnchor1 = bodies[0].body.GetWorldCenter();\n	////var groundAnchor2 = bodies[0].body.GetWorldCenter();\n	var ratio = 1;\n	var pulleyJointDef = new b2PulleyJointDef();\n	pulleyJointDef.Initialize(bodies[2].body, bodies[3].body, groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);\n	pulleyJoint = world.CreateJoint(pulleyJointDef);\n	joints.push(pulleyJoint);\n	\n	anchor1 = bodies[3].body.GetWorldCenter();\n	anchor2 = bodies[4].body.GetWorldCenter();\n	var groundAnchor1 = bodies[1].body.GetWorldCenter();\n	var groundAnchor2 = new b2Vec2(bodies[1].body.GetWorldCenter().x,bodies[1].body.GetWorldCenter().y- 1.5);\n	//groundAnchor1 = bodies[1].body.GetWorldCenter(); \n	//groundAnchor2 = bodies[1].body.GetWorldCenter();\n	pulleyJointDef = new b2PulleyJointDef();\n	pulleyJointDef.Initialize(bodies[3].body, bodies[4].body, groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);\n	pulleyJoint = world.CreateJoint(pulleyJointDef);\n	joints.push(pulleyJoint);\n}\n\n\nfunction getWatchVariables(){\n	return [{name: ''sphere1'', displayName:''Esfera Naranja'',\n	        elements:[{name:''position'', displayName:''Posicion'', function:''sphere1.GetPosition()'', isVector:''true''},\n	                  {name:''velocity'', displayName:''Velocidad'', function:''sphere1.GetLinearVelocity()'', isVector:''true''}]\n	        },\n	        {name: ''sphere2'', displayName:''Esfera Amarilla'',\n	        elements:[{name:''position'', displayName:''Posicion'', function:''sphere2.GetPosition()'', isVector:''true''},\n	                  {name:''velocity'', displayName:''Velocidad'', function:''sphere2.GetLinearVelocity()'', isVector:''true''}]\n	        },\n	        {name: ''sphere3'', displayName:''Esfera Azul'',\n	        elements:[{name:''position'', displayName:''Posicion'', function:''sphere3.GetPosition()'', isVector:''true''},\n	                  {name:''velocity'', displayName:''Velocidad'', function:''sphere3.GetLinearVelocity()'', isVector:''true''}]\n	        }];\n}\n\nfunction getEditablesElements(){\n\n	return [{name: ''pulley1'', displayName:''Polea 1'',\n	        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[0].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n	        	{name:''position.y'',displayName:''Posicion Y'', value:elements[0].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10}]\n	        },\n	        {name: ''pulley2'', displayName:''Polea 2'',\n	        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[1].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n	        	{name:''position.y'',displayName:''Posicion Y'', value:elements[1].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10}]\n	        },\n	        {name: ''sphere1'', displayName:''Esfera Naranja'',\n	        elements:[{name:''radio'',displayName:''Radio'', value:elements[2].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n	        		  {name:''position.x'',displayName:''Posicion X'', value:elements[2].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n	        		  {name:''position.y'',displayName:''Posicion Y'', value:elements[2].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n	                  {name:''mass'',displayName:''Masa'', value:elements[2].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n	                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[2].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n	        },\n	        {name: ''sphere2'', displayName:''Esfera Naranja'',\n	        elements:[{name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n	        		  {name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n	        		  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n	                  {name:''mass'',displayName:''Masa'', value:elements[3].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n	                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n	        },\n	        {name: ''sphere3'', displayName:''Esfera Naranja'',\n	        elements:[{name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n	        		  {name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n	        		  {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n	                  {name:''mass'',displayName:''Masa'', value:elements[4].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n	                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n	        }];\n}\n\n function setValuesForElement(name,property,value){\n    var element = getElementByName(name);\n    if(element!=null){\n        el = property.split(''.'');\n        if(el.length>1)\n            element[el[0]][el[1]] = value;\n        else\n            element[property] = value;\n    }\n\n }\n\n function drawAdditionalData(context){\n    // Aqui pintamos el joint\n }'),
(3, 24, 'elementsChanged = false;\n\nfunction createInteractiveWorld(){\n\n	var v=getElementByName(''velocity'');\n 	bodies[0].body.SetLinearVelocity(new b2Vec2(v.value.x,v.value.y));\n}\n\nfunction getWatchVariables(){\n	return [{name: ''sphere1'', displayName:''Esfera Naranja'',\n	        elements:[{name:''position'', displayName:''Posicion'', function:''sphere1.GetPosition()'', isVector:''true''},\n	                  {name:''velocity'', displayName:''Velocidad'', function:''sphere1.GetLinearVelocity()'', isVector:''true''}]\n	        }];\n}\n\nfunction getEditablesElements(){\n\n	return [{name: ''velocity'', displayName:''Velocidad'',\n	        elements:[{name:''value.x'',displayName:''X'', value:elements[0].value.x,unity:'''',type:''float'',minVal:0.1,maxVal:10},\n	        	{name:''value.y'',displayName:''Y'', value:elements[0].value.y,unity:'''',type:''float'',minVal:0.1,maxVal:10}]\n	        },\n	        {name: ''sphere1'', displayName:''Esfera'',\n	        elements:[{name:''radio'',displayName:''Radio'', value:elements[1].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\n	        		  {name:''position.x'',displayName:''Posicion X'', value:elements[1].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n	        		  {name:''position.y'',displayName:''Posicion Y'', value:elements[1].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\n	                  {name:''mass'',displayName:''Masa'', value:elements[1].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\n	                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\n	        }];\n}\n\n function setValuesForElement(name,property,value){\n    var element = getElementByName(name);\n    if(element!=null){\n        el = property.split(''.'');\n        if(el.length>1)\n            element[el[0]][el[1]] = value;\n        else\n            element[property] = value;\n    }\n\n }\n\n function drawAdditionalData(context){\n    // Aqui pintamos el joint\n }'),
(4, 2, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2RevoluteJointDef();	\r\n	the_joint0.Initialize(getBodyByName(''base''),getBodyByName(''dynamo1''), bodies[0].body.GetWorldCenter(), bodies[1].body.GetWorldCenter());\r\n	//the_joint0.Initialize(bodies[0].body, bodies[1].body, bodies[0].body.GetWorldCenter(), new b2Vec2(bodies[0].body.GetWorldCenter().x, bodies[1].body.GetWorldCenter().y));\r\n	the_joint0.collideConnected = true;\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	\r\n	var the_joint01 = new b2WeldJointDef();\r\n	the_joint01.Initialize(getBodyByName(''dynamo1''), getBodyByName(''dynamo2''), getBodyByName(''dynamo1'').GetWorldCenter());\r\n	var joint01 = world.CreateJoint(the_joint01);\r\n	\r\n	var the_joint1 = new b2DistanceJointDef();\r\n	the_joint1.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere1''), new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere1'').GetWorldCenter());\r\n	the_joint1.collideConnected = true;\r\n	var joint1 = world.CreateJoint(the_joint1);\r\n\r\n	var the_joint2 = new b2DistanceJointDef();\r\n	the_joint2.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere2''), new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere2'').GetWorldCenter());\r\n	the_joint2.collideConnected = true;\r\n	var joint2 = world.CreateJoint(the_joint2);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	context.fillStyle = "#FFFFFF";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";\r\n	//Asignar posicion y pintar fuerza\r\n	var	force = getBodyByName(''dynamo2'').GetLinearVelocity();\r\n	var text = "X: " + (force.x * 10).toFixed(2) + " Y: " + (force.y * 10).toFixed(2);\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''dynamo2'', displayName:''Plataforma'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''dynamo2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''dynamo2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera 1'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera 2'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n  return [{name:''dynamo2'',displayName:''Plataforma'',\r\n            elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n            ]},				\r\n			{name:''sphere1'',displayName:''Esfera 1'',\r\n            elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n            ]},\r\n			{name:''sphere2'',displayName:''Esfera 2'',\r\n            elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                      {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n            ]}\r\n          ];\r\n}'),
(5, 3, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2RevoluteJointDef();	\r\n	the_joint0.Initialize(getBodyByName(''base''),getBodyByName(''dynamo1''), bodies[0].body.GetWorldCenter(), bodies[1].body.GetWorldCenter());\r\n	//the_joint0.Initialize(bodies[0].body, bodies[1].body, bodies[0].body.GetWorldCenter(), new b2Vec2(bodies[0].body.GetWorldCenter().x, bodies[1].body.GetWorldCenter().y));\r\n	the_joint0.collideConnected = true;\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	\r\n	var the_joint01 = new b2WeldJointDef();\r\n	the_joint01.Initialize(getBodyByName(''dynamo1''), getBodyByName(''dynamo2''), getBodyByName(''dynamo1'').GetWorldCenter());\r\n	var joint01 = world.CreateJoint(the_joint01);\r\n	\r\n	var the_joint1 = new b2DistanceJointDef();\r\n	the_joint1.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere1''), new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere1'').GetWorldCenter());\r\n	the_joint1.collideConnected = true;\r\n	var joint1 = world.CreateJoint(the_joint1);\r\n\r\n	var the_joint2 = new b2DistanceJointDef();\r\n	the_joint2.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere2''), new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere2'').GetWorldCenter());\r\n	the_joint2.collideConnected = true;\r\n	var joint2 = world.CreateJoint(the_joint2);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	context.fillStyle = "#FFFFFF";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";\r\n	//Asignar posicion y pintar fuerza\r\n	var	force = getBodyByName(''dynamo2'').GetLinearVelocity();\r\n	var text = "X: " + (force.x * 10).toFixed(2) + " Y: " + (force.y * 10).toFixed(2);\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''dynamo2'', displayName:''Plataforma'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''dynamo2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''dynamo2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera 1'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera 2'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n      return [{name:''dynamo2'',displayName:''Plataforma'',\r\n                elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n                          {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n                ]},				\r\n				{name:''sphere1'',displayName:''Esfera 1'',\r\n                elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n                ]},\r\n				{name:''sphere2'',displayName:''Esfera 2'',\r\n                elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                          {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n                ]}\r\n              ];\r\n     }'),
(6, 13, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){\r\n\r\n	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''sphere1'', displayName:''Esfera Naranja'',\r\n	        elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n	                  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n	        },\r\n	        {name: ''sphere2'', displayName:''Esfera Amarilla'',\r\n	        elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n	                  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n	        },\r\n	        {name: ''sphere3'', displayName:''Esfera Azul'',\r\n	        elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere3\\'').GetPosition()'', isVector:''true''},\r\n	                  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere3\\'').GetLinearVelocity()'', isVector:''true''}]\r\n	        },\r\n	        {name: ''sphere4'', displayName:''Esfera Verde'',\r\n	        elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere4\\'').GetPosition()'', isVector:''true''},\r\n	                  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere4\\'').GetLinearVelocity()'', isVector:''true''}]\r\n	        }];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n	return [{name: ''sphere1'', displayName:''Esfera Naranja'',\r\n	        elements:[{name:''radio'',displayName:''Radio'', value:elements[0].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\r\n	        		  {name:''position.x'',displayName:''Posicion X'', value:elements[0].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n	        		  {name:''position.y'',displayName:''Posicion Y'', value:elements[0].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n	                  {name:''mass'',displayName:''Masa'', value:elements[0].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n	                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\r\n	        },\r\n	        {name: ''sphere2'', displayName:''Esfera Amarilla'',\r\n	        elements:[{name:''radio'',displayName:''Radio'', value:elements[1].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\r\n	        		  {name:''position.x'',displayName:''Posicion X'', value:elements[1].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n	        		  {name:''position.y'',displayName:''Posicion Y'', value:elements[1].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n	                  {name:''mass'',displayName:''Masa'', value:elements[1].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n	                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\r\n	        },\r\n	        {name: ''sphere3'', displayName:''Esfera Azul'',\r\n	        elements:[{name:''radio'',displayName:''Radio'', value:elements[2].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\r\n	        		  {name:''position.x'',displayName:''Posicion X'', value:elements[2].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n	        		  {name:''position.y'',displayName:''Posicion Y'', value:elements[2].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n	                  {name:''mass'',displayName:''Masa'', value:elements[2].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n	                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[2].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\r\n	        },\r\n	        {name: ''sphere4'', displayName:''Esfera Verde'',\r\n	        elements:[{name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:100},\r\n	        		  {name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n	        		  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n	                  {name:''mass'',displayName:''Masa'', value:elements[3].mass,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n	                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}]\r\n	        }\r\n	        ];\r\n}\r\n\r\n function setValuesForElement(name,property,value){\r\n    var element = getElementByName(name);\r\n    if(element!=null){\r\n        el = property.split(''.'');\r\n        if(el.length>1)\r\n            element[el[0]][el[1]] = value;\r\n        else\r\n            element[property] = value;\r\n    }\r\n }\r\n\r\n function drawAdditionalData(context){\r\n    // Aqui pintamos el joint\r\n }'),
(7, 4, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2RevoluteJointDef();	\r\n	the_joint0.Initialize(getBodyByName(''base''),getBodyByName(''dynamo1''), new b2Vec2(bodies[1].body.GetWorldCenter().x, bodies[0].body.GetWorldCenter().y), bodies[1].body.GetWorldCenter());\r\n	//the_joint0.Initialize(bodies[0].body, bodies[1].body, bodies[0].body.GetWorldCenter(), new b2Vec2(bodies[0].body.GetWorldCenter().x, bodies[1].body.GetWorldCenter().y));\r\n	the_joint0.collideConnected = true;\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	\r\n	var the_joint01 = new b2WeldJointDef();\r\n	the_joint01.Initialize(getBodyByName(''dynamo1''), getBodyByName(''dynamo2''), new b2Vec2(getBodyByName(''dynamo1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y));\r\n	var joint01 = world.CreateJoint(the_joint01);\r\n	\r\n	var the_joint1 = new b2DistanceJointDef();\r\n	the_joint1.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere1''), new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere1'').GetWorldCenter());\r\n	the_joint1.collideConnected = true;\r\n	var joint1 = world.CreateJoint(the_joint1);\r\n\r\n	var the_joint2 = new b2DistanceJointDef();\r\n	the_joint2.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere2''), new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere2'').GetWorldCenter());\r\n	the_joint2.collideConnected = true;\r\n	var joint2 = world.CreateJoint(the_joint2);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	context.fillStyle = "#FFFFFF";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";\r\n	//Asignar posicion y pintar fuerza\r\n	var	force = getBodyByName(''dynamo2'').GetLinearVelocity();\r\n	var text = "X: " + (force.x * 10).toFixed(2) + " Y: " + (force.y * 10).toFixed(2);\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''dynamo2'', displayName:''Plataforma'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''dynamo2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''dynamo2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera 1'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera 2'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n    return [{name:''dynamo2'',displayName:''Plataforma'',\r\n		elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},				\r\n		{name:''sphere1'',displayName:''Esfera 1'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},\r\n		{name:''sphere2'',displayName:''Esfera 2'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]}\r\n	  ];\r\n }'),
(8, 5, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2RevoluteJointDef();	\r\n	the_joint0.Initialize(getBodyByName(''base''),getBodyByName(''dynamo1''), new b2Vec2(bodies[1].body.GetWorldCenter().x, bodies[0].body.GetWorldCenter().y), bodies[1].body.GetWorldCenter());\r\n	//the_joint0.Initialize(bodies[0].body, bodies[1].body, bodies[0].body.GetWorldCenter(), new b2Vec2(bodies[0].body.GetWorldCenter().x, bodies[1].body.GetWorldCenter().y));\r\n	the_joint0.collideConnected = true;\r\n	var joint0 = world.CreateJoint(the_joint0);\r\n	\r\n	var the_joint01 = new b2WeldJointDef();\r\n	the_joint01.Initialize(getBodyByName(''dynamo1''), getBodyByName(''dynamo2''), new b2Vec2(getBodyByName(''dynamo1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y));\r\n	var joint01 = world.CreateJoint(the_joint01);\r\n	\r\n	var the_joint1 = new b2DistanceJointDef();\r\n	the_joint1.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere1''), new b2Vec2(getBodyByName(''sphere1'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere1'').GetWorldCenter());\r\n	the_joint1.collideConnected = true;\r\n	var joint1 = world.CreateJoint(the_joint1);\r\n\r\n	var the_joint2 = new b2DistanceJointDef();\r\n	the_joint2.Initialize(getBodyByName(''dynamo2''), getBodyByName(''sphere2''), new b2Vec2(getBodyByName(''sphere2'').GetWorldCenter().x, getBodyByName(''dynamo2'').GetWorldCenter().y), getBodyByName(''sphere2'').GetWorldCenter());\r\n	the_joint2.collideConnected = true;\r\n	var joint2 = world.CreateJoint(the_joint2);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	context.fillStyle = "#000000";\r\n	var fontSize = 30 * zoom / 100;\r\n	context.font = fontSize + "px Arial";\r\n	//Asignar posicion y pintar fuerza\r\n	var	force = getBodyByName(''dynamo2'').GetLinearVelocity();\r\n	var text = "X: " + (force.x * 10).toFixed(2) + " Y: " + (force.y * 10).toFixed(2);\r\n	context.fillText(text, \r\n					(getBodyByName(''base'').GetPosition().x * zoom) - (fontSize * text.length)/4.7,\r\n					(getBodyByName(''base'').GetPosition().y * zoom) + (fontSize / 2));	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''dynamo2'', displayName:''Plataforma'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''dynamo2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''dynamo2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera 1'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera 2'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n    return [{name:''dynamo2'',displayName:''Plataforma'',\r\n		elements:[{name:''mass'',displayName:''Masa'', value:elements[1].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[1].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},				\r\n		{name:''sphere1'',displayName:''Esfera 1'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]},\r\n		{name:''sphere2'',displayName:''Esfera 2'',\r\n		elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[4].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''position.y'',displayName:''Posicion Y'', value:elements[4].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''mass'',displayName:''Masa'', value:elements[4].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''radio'',displayName:''Radio'', value:elements[4].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n				  {name:''elasticity'',displayName:''Elasticidad'', value:elements[4].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n		]}\r\n	  ];\r\n }\r\n'),
(9, 9, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2PulleyJointDef();	\r\n	var anchor1 = getBodyByName(''sphere1'').GetWorldCenter();\r\n	var anchor2 = new getBodyByName(''sphere2'').GetWorldCenter(); \r\n	var groundAnchor1 = new b2Vec2(3.7, 2.5);\r\n	var groundAnchor2 = new b2Vec2(3.7, 2.5); \r\n	var ratio = 1.0;	\r\n	the_joint0.Initialize(getBodyByName(''sphere1''), getBodyByName(''sphere2''), groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);	\r\n	var joint0 = world.CreateJoint(the_joint0);		\r\n	getBodyByName(''plane'').SetPositionAndAngle(getBodyByName(''plane'').GetPosition(), 3.1415/4.5);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n	\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''plane'', displayName:''Plano inclinado'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''plane\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''plane\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera amarilla'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera naranja'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n	return [{name:''plane'',displayName:''Plano inclinado'',\r\n        elements:[{name:''mass'',displayName:''Masa'', value:elements[0].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]},				\r\n		{name:''sphere1'',displayName:''Esfera 1'',\r\n        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[2].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''position.y'',displayName:''Posicion Y'', value:elements[2].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''mass'',displayName:''Masa'', value:elements[2].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''radio'',displayName:''Radio'', value:elements[2].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[2].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]},\r\n		{name:''sphere2'',displayName:''Esfera 2'',\r\n        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]}\r\n    ];\r\n}'),
(10, 10, 'elementsChanged = false;\r\n\r\nfunction createInteractiveWorld(){	\r\n	var the_joint0 = new b2PulleyJointDef();	\r\n	var anchor1 = getBodyByName(''sphere1'').GetWorldCenter();\r\n	var anchor2 = new getBodyByName(''sphere2'').GetWorldCenter(); \r\n	var groundAnchor1 = new b2Vec2(4.25, 4.5);\r\n	var groundAnchor2 = new b2Vec2(4.25, 4.5); \r\n	var ratio = 1.0;	\r\n	the_joint0.Initialize(getBodyByName(''sphere1''), getBodyByName(''sphere2''), groundAnchor1, groundAnchor2, anchor1, anchor2, ratio);	\r\n	var joint0 = world.CreateJoint(the_joint0);		\r\n	getBodyByName(''plane'').SetPositionAndAngle(getBodyByName(''plane'').GetPosition(), 3.1415/6.1);\r\n}\r\n\r\nfunction drawAdditionalData(context){\r\n}\r\n\r\nfunction getWatchVariables(){\r\n	return [{name: ''plane'', displayName:''Plano inclinado'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''plane\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''plane\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere1'', displayName:''Esfera amarilla'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere1\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere1\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			},\r\n			{name: ''sphere2'', displayName:''Esfera naranja'',\r\n			elements:[{name:''position'', displayName:''Posicion'', function:''getBodyByName(\\''sphere2\\'').GetPosition()'', isVector:''true''},\r\n					  {name:''velocity'', displayName:''Velocidad'', function:''getBodyByName(\\''sphere2\\'').GetLinearVelocity()'', isVector:''true''}]\r\n			}];\r\n}\r\n\r\nfunction getEditablesElements(){\r\n\r\n	return [{name:''plane'',displayName:''Plano inclinado'',\r\n        elements:[{name:''mass'',displayName:''Masa'', value:elements[0].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},                         \r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[0].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]},				\r\n		{name:''sphere1'',displayName:''Esfera 1'',\r\n        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[2].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''position.y'',displayName:''Posicion Y'', value:elements[2].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''mass'',displayName:''Masa'', value:elements[2].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''radio'',displayName:''Radio'', value:elements[2].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[2].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]},\r\n		{name:''sphere2'',displayName:''Esfera 2'',\r\n        elements:[{name:''position.x'',displayName:''Posicion X'', value:elements[3].position.x,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''position.y'',displayName:''Posicion Y'', value:elements[3].position.y,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''mass'',displayName:''Masa'', value:elements[3].density,unity:''kgs'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''radio'',displayName:''Radio'', value:elements[3].radio,unity:''mts'',type:''float'',minVal:0.1,maxVal:10},\r\n                  {name:''elasticity'',displayName:''Elasticidad'', value:elements[3].elasticity,unity:''N/m'',type:''float'',minVal:0.1,maxVal:10}\r\n        ]}\r\n    ];\r\n}');
